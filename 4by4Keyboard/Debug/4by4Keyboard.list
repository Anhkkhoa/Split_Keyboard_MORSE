
4by4Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c40  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e50  08007e50  0000912c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e50  08007e50  00008e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e58  08007e58  0000912c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e58  08007e58  00008e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e5c  08007e5c  00008e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08007e60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  2000012c  08007f8c  0000912c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  08007f8c  00009bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fd  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303e  00000000  00000000  0001c559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0001f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280d3  00000000  00000000  0002111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141f5  00000000  00000000  000491f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb06c  00000000  00000000  0005d3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  00148494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0014c47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007db0 	.word	0x08007db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08007db0 	.word	0x08007db0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 f9ee 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f808 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f888 	bl	80005d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f856 	bl	8000578 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004cc:	f006 fecc 	bl	8007268 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x18>

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b096      	sub	sp, #88	@ 0x58
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2244      	movs	r2, #68	@ 0x44
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f007 fc38 	bl	8007d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004fa:	f001 fecf 	bl	800229c <HAL_PWREx_ControlVoltageScaling>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000504:	f000 f8ce 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000508:	2310      	movs	r3, #16
 800050a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000514:	2360      	movs	r3, #96	@ 0x60
 8000516:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800051c:	2301      	movs	r3, #1
 800051e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000520:	2301      	movs	r3, #1
 8000522:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000524:	2310      	movs	r3, #16
 8000526:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000528:	2307      	movs	r3, #7
 800052a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052c:	2302      	movs	r3, #2
 800052e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4618      	mov	r0, r3
 800053a:	f001 ff15 	bl	8002368 <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000544:	f000 f8ae 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054c:	2303      	movs	r3, #3
 800054e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f002 fadd 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800056c:	f000 f89a 	bl	80006a4 <Error_Handler>
  }
}
 8000570:	bf00      	nop
 8000572:	3758      	adds	r7, #88	@ 0x58
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 800057e:	4a15      	ldr	r2, [pc, #84]	@ (80005d4 <MX_USART2_UART_Init+0x5c>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_USART2_UART_Init+0x58>)
 80005bc:	f003 f990 	bl	80038e0 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c6:	f000 f86d 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000148 	.word	0x20000148
 80005d4:	40004400 	.word	0x40004400

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_GPIO_Init+0xc4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <MX_GPIO_Init+0xc4>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <MX_GPIO_Init+0xc4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <MX_GPIO_Init+0xc4>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a18      	ldr	r2, [pc, #96]	@ (800069c <MX_GPIO_Init+0xc4>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000656:	f000 fc7d 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <MX_GPIO_Init+0xc8>)
 8000672:	f000 fac5 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	2320      	movs	r3, #32
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 fab6 	bl	8000c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000800 	.word	0x48000800

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x44>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <HAL_MspInit+0x44>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_MspInit+0x44>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <HAL_MspInit+0x44>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0ac      	sub	sp, #176	@ 0xb0
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2288      	movs	r2, #136	@ 0x88
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f007 fb1d 	bl	8007d58 <memset>
  if(huart->Instance==USART2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <HAL_UART_MspInit+0xb0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d13b      	bne.n	80007a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000728:	2302      	movs	r3, #2
 800072a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fc17 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000740:	f7ff ffb0 	bl	80006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000748:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 800074a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_UART_MspInit+0xb4>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000774:	230c      	movs	r3, #12
 8000776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078c:	2307      	movs	r3, #7
 800078e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f000 fa30 	bl	8000c00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	37b0      	adds	r7, #176	@ 0xb0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40004400 	.word	0x40004400
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f8a5 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <OTG_FS_IRQHandler+0x10>)
 8000816:	f000 fcf3 	bl	8001200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200006b4 	.word	0x200006b4

08000824 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000880 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f007 fa77 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087a:	f7ff fe1d 	bl	80004b8 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000880:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800088c:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 8000890:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000894:	20000bac 	.word	0x20000bac

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_Init+0x3c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0b      	ldr	r2, [pc, #44]	@ (80008d8 <HAL_Init+0x3c>)
 80008ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b2:	2003      	movs	r0, #3
 80008b4:	f000 f962 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 f80f 	bl	80008dc <HAL_InitTick>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	e001      	b.n	80008ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ca:	f7ff fef1 	bl	80006b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_InitTick+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d023      	beq.n	8000938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_InitTick+0x70>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_InitTick+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f96d 	bl	8000be6 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10f      	bne.n	8000932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d809      	bhi.n	800092c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f937 	bl	8000b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0x74>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e007      	b.n	800093c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e004      	b.n	800093c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e001      	b.n	800093c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	200001d0 	.word	0x200001d0

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	200001d0 	.word	0x200001d0

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff ffee 	bl	800097c <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffde 	bl	800097c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	@ (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	@ (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	@ 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff29 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff3e 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff8e 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff31 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa2 	bl	8000b38 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e17f      	b.n	8000f10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8171 	beq.w	8000f0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d005      	beq.n	8000c40 <HAL_GPIO_Init+0x40>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d130      	bne.n	8000ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 0201 	and.w	r2, r3, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d118      	bne.n	8000ce0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d017      	beq.n	8000d1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d123      	bne.n	8000d70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	6939      	ldr	r1, [r7, #16]
 8000d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0203 	and.w	r2, r3, #3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80ac 	beq.w	8000f0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dca:	4a5a      	ldr	r2, [pc, #360]	@ (8000f34 <HAL_GPIO_Init+0x334>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000df4:	d025      	beq.n	8000e42 <HAL_GPIO_Init+0x242>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	@ (8000f38 <HAL_GPIO_Init+0x338>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01f      	beq.n	8000e3e <HAL_GPIO_Init+0x23e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <HAL_GPIO_Init+0x33c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x23a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4d      	ldr	r2, [pc, #308]	@ (8000f40 <HAL_GPIO_Init+0x340>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x236>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	@ (8000f44 <HAL_GPIO_Init+0x344>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x232>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	@ (8000f48 <HAL_GPIO_Init+0x348>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x22e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	@ (8000f4c <HAL_GPIO_Init+0x34c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x22a>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e00c      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	e00a      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e2e:	2305      	movs	r3, #5
 8000e30:	e008      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e42:	2300      	movs	r3, #0
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e54:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <HAL_GPIO_Init+0x334>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e62:	4b3b      	ldr	r3, [pc, #236]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e86:	4a32      	ldr	r2, [pc, #200]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e8c:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eda:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f47f ae78 	bne.w	8000c10 <HAL_GPIO_Init+0x10>
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	48001000 	.word	0x48001000
 8000f48:	48001400 	.word	0x48001400
 8000f4c:	48001800 	.word	0x48001800
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e101      	b.n	800119a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f006 faa4 	bl	80074f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fa87 	bl	80044d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7c1a      	ldrb	r2, [r3, #16]
 8000fd0:	f88d 2000 	strb.w	r2, [sp]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd8:	f003 f9a3 	bl	8004322 <USB_CoreInit>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0d5      	b.n	800119a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fa7f 	bl	80044f8 <USB_SetCurrentMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2202      	movs	r2, #2
 8001004:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0c6      	b.n	800119a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e04a      	b.n	80010a8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3315      	adds	r3, #21
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3314      	adds	r3, #20
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	b298      	uxth	r0, r3
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	332e      	adds	r3, #46	@ 0x2e
 800104e:	4602      	mov	r2, r0
 8001050:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3318      	adds	r3, #24
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	331c      	adds	r3, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	3320      	adds	r3, #32
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3324      	adds	r3, #36	@ 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3301      	adds	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3af      	bcc.n	8001012 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e044      	b.n	8001142 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	791b      	ldrb	r3, [r3, #4]
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3b5      	bcc.n	80010b8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7c1a      	ldrb	r2, [r3, #16]
 8001154:	f88d 2000 	strb.w	r2, [sp]
 8001158:	3304      	adds	r3, #4
 800115a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800115c:	f003 fa18 	bl	8004590 <USB_DevInit>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e013      	b.n	800119a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 f855 	bl	8002238 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f004 f9cf 	bl	8005536 <USB_DevDisconnect>

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_PCD_Start+0x1c>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e01c      	b.n	80011f8 <HAL_PCD_Start+0x56>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b5b      	ldrb	r3, [r3, #13]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d105      	bne.n	80011da <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f968 	bl	80044b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 f983 	bl	80054f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08d      	sub	sp, #52	@ 0x34
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fa41 	bl	800569e <USB_GetMode>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 8481 	bne.w	8001b26 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f9a5 	bl	8005578 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8477 	beq.w	8001b24 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f004 f992 	bl	8005578 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f002 0202 	and.w	r2, r2, #2
 800126c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f004 f980 	bl	8005578 <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b10      	cmp	r3, #16
 8001280:	d161      	bne.n	8001346 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0210 	bic.w	r2, r2, #16
 8001290:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 020f 	and.w	r2, r3, #15
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	3304      	adds	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	0c5b      	lsrs	r3, r3, #17
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d124      	bne.n	8001308 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d035      	beq.n	8001336 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f003 ffb7 	bl	8005250 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ee:	441a      	add	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001300:	441a      	add	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	e016      	b.n	8001336 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	0c5b      	lsrs	r3, r3, #17
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b06      	cmp	r3, #6
 8001312:	d110      	bne.n	8001336 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800131a:	2208      	movs	r2, #8
 800131c:	4619      	mov	r1, r3
 800131e:	6a38      	ldr	r0, [r7, #32]
 8001320:	f003 ff96 	bl	8005250 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0210 	orr.w	r2, r2, #16
 8001344:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f004 f914 	bl	8005578 <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001356:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800135a:	f040 80a7 	bne.w	80014ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f004 f919 	bl	800559e <USB_ReadDevAllOutEpInterrupt>
 800136c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800136e:	e099      	b.n	80014a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 808e 	beq.w	8001498 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f93d 	bl	8005606 <USB_ReadDevOutEPInterrupt>
 800138c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2301      	movs	r3, #1
 80013a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fe69 	bl	8002084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fea5 	bl	8002120 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	2310      	movs	r3, #16
 80013f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001404:	2b80      	cmp	r3, #128	@ 0x80
 8001406:	d109      	bne.n	800141c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800141c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2200      	movs	r2, #0
 800143e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f006 f9aa 	bl	80077a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2302      	movs	r3, #2
 800145c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001474:	461a      	mov	r2, r3
 8001476:	2320      	movs	r3, #32
 8001478:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	3301      	adds	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f af62 	bne.w	8001370 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 f861 	bl	8005578 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014c0:	f040 80a4 	bne.w	800160c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 f882 	bl	80055d2 <USB_ReadDevAllInEpInterrupt>
 80014ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014d4:	e096      	b.n	8001604 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808b 	beq.w	80015f8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 f8a8 	bl	8005642 <USB_ReadDevInEPInterrupt>
 80014f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d020      	beq.n	8001540 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	69f9      	ldr	r1, [r7, #28]
 800151a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800151e:	4013      	ands	r3, r2
 8001520:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800152e:	461a      	mov	r2, r3
 8001530:	2301      	movs	r3, #1
 8001532:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f006 f89b 	bl	8007676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001556:	461a      	mov	r2, r3
 8001558:	2308      	movs	r3, #8
 800155a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2310      	movs	r3, #16
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2340      	movs	r3, #64	@ 0x40
 8001592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800159e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015a0:	6a38      	ldr	r0, [r7, #32]
 80015a2:	f003 f93d 	bl	8004820 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	3310      	adds	r3, #16
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	78db      	ldrb	r3, [r3, #3]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f006 f8f8 	bl	80077c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e0:	461a      	mov	r2, r3
 80015e2:	2302      	movs	r3, #2
 80015e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fcbe 	bl	8001f74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	3301      	adds	r3, #1
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f af65 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 ffb1 	bl	8005578 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800161c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001620:	d122      	bne.n	8001668 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f006 fb18 	bl	8007c80 <HAL_PCDEx_LPM_Callback>
 8001650:	e002      	b.n	8001658 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f006 f87c 	bl	8007750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 ff83 	bl	8005578 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800167c:	d112      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f006 f838 	bl	8007704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 ff65 	bl	8005578 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80016b8:	d121      	bne.n	80016fe <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80016c8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	f003 020f 	and.w	r2, r3, #15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016ee:	2101      	movs	r1, #1
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f006 fac5 	bl	8007c80 <HAL_PCDEx_LPM_Callback>
 80016f6:	e002      	b.n	80016fe <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f006 f803 	bl	8007704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 ff38 	bl	8005578 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001712:	f040 80b6 	bne.w	8001882 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2110      	movs	r1, #16
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f875 	bl	8004820 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173a:	e046      	b.n	80017ca <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001748:	461a      	mov	r2, r3
 800174a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800174e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001760:	0151      	lsls	r1, r2, #5
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	440a      	add	r2, r1
 8001766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800176a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800176e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800177c:	461a      	mov	r2, r3
 800177e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001782:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001794:	0151      	lsls	r1, r2, #5
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	440a      	add	r2, r1
 800179a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800179e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b4:	0151      	lsls	r1, r2, #5
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	440a      	add	r2, r1
 80017ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c6:	3301      	adds	r3, #1
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	791b      	ldrb	r3, [r3, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d3b2      	bcc.n	800173c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80017e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7bdb      	ldrb	r3, [r3, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d016      	beq.n	8001820 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001802:	f043 030b 	orr.w	r3, r3, #11
 8001806:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001818:	f043 030b 	orr.w	r3, r3, #11
 800181c:	6453      	str	r3, [r2, #68]	@ 0x44
 800181e:	e015      	b.n	800184c <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800182e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001832:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001836:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001846:	f043 030b 	orr.w	r3, r3, #11
 800184a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800185a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800185e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f003 ff47 	bl	8005700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fe76 	bl	8005578 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001896:	d123      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f003 ff0c 	bl	80056ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f833 	bl	8004912 <USB_GetDevSpeed>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681c      	ldr	r4, [r3, #0]
 80018b8:	f001 fabe 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 80018bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018c2:	461a      	mov	r2, r3
 80018c4:	4620      	mov	r0, r4
 80018c6:	f002 fd59 	bl	800437c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f005 fefb 	bl	80076c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80018de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fe47 	bl	8005578 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d10a      	bne.n	800190a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f005 fed8 	bl	80076aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 0208 	and.w	r2, r2, #8
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fe32 	bl	8005578 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	2b80      	cmp	r3, #128	@ 0x80
 800191c:	d123      	bne.n	8001966 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192a:	2301      	movs	r3, #1
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
 800192e:	e014      	b.n	800195a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fadf 	bl	8001f12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	3301      	adds	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	4293      	cmp	r3, r2
 8001964:	d3e4      	bcc.n	8001930 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fe04 	bl	8005578 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800197a:	d13c      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001980:	e02b      	b.n	80019da <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	3318      	adds	r3, #24
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d115      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da12      	bge.n	80019d4 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3317      	adds	r3, #23
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fa9f 	bl	8001f12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	3301      	adds	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d3cd      	bcc.n	8001982 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fdbc 	bl	8005578 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a0a:	d156      	bne.n	8001aba <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a10:	e045      	b.n	8001a9e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d12e      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da2b      	bge.n	8001a98 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a4c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d121      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a94:	6053      	str	r3, [r2, #4]
            break;
 8001a96:	e008      	b.n	8001aaa <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d3b3      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fd5a 	bl	8005578 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ace:	d10a      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f005 fe89 	bl	80077e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fd44 	bl	8005578 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d115      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 fe79 	bl	8007804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e000      	b.n	8001b26 <HAL_PCD_IRQHandler+0x926>
      return;
 8001b24:	bf00      	nop
    }
  }
}
 8001b26:	3734      	adds	r7, #52	@ 0x34
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_PCD_SetAddress+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e012      	b.n	8001b6c <HAL_PCD_SetAddress+0x40>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fca3 	bl	80054a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	70fb      	strb	r3, [r7, #3]
 8001b86:	460b      	mov	r3, r1
 8001b88:	803b      	strh	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3310      	adds	r3, #16
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00f      	b.n	8001bda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001be6:	883b      	ldrh	r3, [r7, #0]
 8001be8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	78ba      	ldrb	r2, [r7, #2]
 8001bf4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c08:	78bb      	ldrb	r3, [r7, #2]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d102      	bne.n	8001c14 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_PCD_EP_Open+0xae>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e00e      	b.n	8001c40 <HAL_PCD_EP_Open+0xcc>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fe8d 	bl	8004950 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da0f      	bge.n	8001c7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 020f 	and.w	r2, r3, #15
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	3310      	adds	r3, #16
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
 8001c7a:	e00f      	b.n	8001c9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 020f 	and.w	r2, r3, #15
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_EP_Close+0x6e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00e      	b.n	8001cd4 <HAL_PCD_EP_Close+0x8c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fecb 	bl	8004a60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 ff71 	bl	8004c18 <USB_EPStartXfer>

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f003 020f 	and.w	r2, r3, #15
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	3310      	adds	r3, #16
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6979      	ldr	r1, [r7, #20]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 ff40 	bl	8004c18 <USB_EPStartXfer>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	7912      	ldrb	r2, [r2, #4]
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04e      	b.n	8001e5e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da0f      	bge.n	8001de8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	3310      	adds	r3, #16
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	705a      	strb	r2, [r3, #1]
 8001de6:	e00d      	b.n	8001e04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_PCD_EP_SetStall+0x82>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e01c      	b.n	8001e5e <HAL_PCD_EP_SetStall+0xbc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa64 	bl	8005300 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f003 fc56 	bl	8005700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	7912      	ldrb	r2, [r2, #4]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e042      	b.n	8001f0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da0f      	bge.n	8001eac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	705a      	strb	r2, [r3, #1]
 8001eaa:	e00f      	b.n	8001ecc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_EP_ClrStall+0x86>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e00e      	b.n	8001f0a <HAL_PCD_EP_ClrStall+0xa4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fa6e 	bl	80053dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0c      	bge.n	8001f40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3310      	adds	r3, #16
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e00c      	b.n	8001f5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f891 	bl	8005088 <USB_EPStopXfer>
 8001f66:	4603      	mov	r3, r0
 8001f68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3310      	adds	r3, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d901      	bls.n	8001fac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e067      	b.n	800207c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d902      	bls.n	8001fc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fd0:	e026      	b.n	8002020 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d902      	bls.n	8001fee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68d9      	ldr	r1, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	b29b      	uxth	r3, r3
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f003 f8ea 	bl	80051dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	441a      	add	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	441a      	add	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	429a      	cmp	r2, r3
 8002034:	d809      	bhi.n	800204a <PCD_WriteEmptyTxFifo+0xd6>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203e:	429a      	cmp	r2, r3
 8002040:	d203      	bcs.n	800204a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1c3      	bne.n	8001fd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	429a      	cmp	r2, r3
 8002054:	d811      	bhi.n	800207a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	2201      	movs	r2, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800206a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	43db      	mvns	r3, r3
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002076:	4013      	ands	r3, r2
 8002078:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	333c      	adds	r3, #60	@ 0x3c
 800209c:	3304      	adds	r3, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a19      	ldr	r2, [pc, #100]	@ (800211c <PCD_EP_OutXfrComplete_int+0x98>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d124      	bne.n	8002104 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d0:	461a      	mov	r2, r3
 80020d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020d6:	6093      	str	r3, [r2, #8]
 80020d8:	e01a      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f0:	461a      	mov	r2, r3
 80020f2:	2320      	movs	r3, #32
 80020f4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f005 fa9f 	bl	8007640 <HAL_PCD_DataOutStageCallback>
 8002102:	e005      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f005 fa98 	bl	8007640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	4f54310a 	.word	0x4f54310a

08002120 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	333c      	adds	r3, #60	@ 0x3c
 8002138:	3304      	adds	r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <PCD_EP_OutSetupPacket_int+0x64>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d90e      	bls.n	8002174 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216c:	461a      	mov	r2, r3
 800216e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002172:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f005 fa51 	bl	800761c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	4f54300a 	.word	0x4f54300a

08002188 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021a6:	883b      	ldrh	r3, [r7, #0]
 80021a8:	0419      	lsls	r1, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80021b4:	e028      	b.n	8002208 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e00d      	b.n	80021e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3340      	adds	r3, #64	@ 0x40
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	3301      	adds	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d3ec      	bcc.n	80021ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021f0:	883b      	ldrh	r3, [r7, #0]
 80021f2:	0418      	lsls	r0, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	4302      	orrs	r2, r0
 8002200:	3340      	adds	r3, #64	@ 0x40
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226a:	f043 0303 	orr.w	r3, r3, #3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <HAL_PWREx_GetVoltageRange+0x18>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022aa:	d130      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b8:	d038      	beq.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c2:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2232      	movs	r2, #50	@ 0x32
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e0:	e002      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f4:	d102      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f2      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002308:	d110      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e00f      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231a:	d007      	beq.n	800232c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002324:	4a05      	ldr	r2, [pc, #20]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800232a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWREx_EnableVddUSB+0x1c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002356:	6053      	str	r3, [r2, #4]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e3ca      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b97      	ldr	r3, [pc, #604]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b94      	ldr	r3, [pc, #592]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80e4 	beq.w	8002564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4a>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f040 808b 	bne.w	80024c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	f040 8087 	bne.w	80024c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b2:	4b89      	ldr	r3, [pc, #548]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e3a2      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	4b82      	ldr	r3, [pc, #520]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_RCC_OscConfig+0x7c>
 80023da:	4b7f      	ldr	r3, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_OscConfig+0x88>
 80023e4:	4b7c      	ldr	r3, [pc, #496]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d223      	bcs.n	800243c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd55 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e383      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002408:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a72      	ldr	r2, [pc, #456]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	496d      	ldr	r1, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002426:	4b6c      	ldr	r3, [pc, #432]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	4968      	ldr	r1, [pc, #416]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 800243a:	e025      	b.n	8002488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243c:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a65      	ldr	r2, [pc, #404]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002442:	f043 0308 	orr.w	r3, r3, #8
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4960      	ldr	r1, [pc, #384]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245a:	4b5f      	ldr	r3, [pc, #380]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	495b      	ldr	r1, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd15 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e343      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002488:	f000 fc4a 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	4950      	ldr	r1, [pc, #320]	@ (80025dc <HAL_RCC_OscConfig+0x274>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	4a4e      	ldr	r2, [pc, #312]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80024a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024a8:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fa15 	bl	80008dc <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d052      	beq.n	8002562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	e327      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d032      	beq.n	800252e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c8:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a42      	ldr	r2, [pc, #264]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa52 	bl	800097c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024dc:	f7fe fa4e 	bl	800097c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e310      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ee:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fa:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a36      	ldr	r2, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4931      	ldr	r1, [pc, #196]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	492c      	ldr	r1, [pc, #176]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
 800252c:	e01a      	b.n	8002564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800252e:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a29      	ldr	r2, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253a:	f7fe fa1f 	bl	800097c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002542:	f7fe fa1b 	bl	800097c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e2dd      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002554:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x1da>
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d074      	beq.n	800265a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x21a>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d10e      	bne.n	800259a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d10b      	bne.n	800259a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d064      	beq.n	8002658 <HAL_RCC_OscConfig+0x2f0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d160      	bne.n	8002658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e2ba      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x24a>
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e026      	b.n	8002600 <HAL_RCC_OscConfig+0x298>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ba:	d115      	bne.n	80025e8 <HAL_RCC_OscConfig+0x280>
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a02      	ldr	r2, [pc, #8]	@ (80025d8 <HAL_RCC_OscConfig+0x270>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x298>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08007e08 	.word	0x08007e08
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004
 80025e8:	4ba0      	ldr	r3, [pc, #640]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a9f      	ldr	r2, [pc, #636]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b9d      	ldr	r3, [pc, #628]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a9c      	ldr	r2, [pc, #624]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe f9b8 	bl	800097c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe f9b4 	bl	800097c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e276      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002622:	4b92      	ldr	r3, [pc, #584]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x2a8>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe f9a4 	bl	800097c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe f9a0 	bl	800097c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e262      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264a:	4b88      	ldr	r3, [pc, #544]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d0>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d060      	beq.n	8002728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x310>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d119      	bne.n	80026a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d116      	bne.n	80026a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002678:	4b7c      	ldr	r3, [pc, #496]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x328>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e23f      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b76      	ldr	r3, [pc, #472]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4973      	ldr	r1, [pc, #460]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a4:	e040      	b.n	8002728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d023      	beq.n	80026f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ae:	4b6f      	ldr	r3, [pc, #444]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6e      	ldr	r2, [pc, #440]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe f95f 	bl	800097c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe f95b 	bl	800097c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e21d      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d4:	4b65      	ldr	r3, [pc, #404]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b62      	ldr	r3, [pc, #392]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	495f      	ldr	r1, [pc, #380]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
 80026f4:	e018      	b.n	8002728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f6:	4b5d      	ldr	r3, [pc, #372]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5c      	ldr	r2, [pc, #368]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80026fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe f93b 	bl	800097c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe f937 	bl	800097c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1f9      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273c:	4b4b      	ldr	r3, [pc, #300]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002742:	4a4a      	ldr	r2, [pc, #296]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe f916 	bl	800097c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe f912 	bl	800097c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1d4      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002766:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x3ec>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277c:	4a3b      	ldr	r2, [pc, #236]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe f8f9 	bl	800097c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278e:	f7fe f8f5 	bl	800097c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1b7      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a0:	4b32      	ldr	r3, [pc, #200]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80a6 	beq.w	8002908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b27      	ldr	r3, [pc, #156]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	4a26      	ldr	r2, [pc, #152]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d8:	4b24      	ldr	r3, [pc, #144]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <HAL_RCC_OscConfig+0x508>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <HAL_RCC_OscConfig+0x508>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_RCC_OscConfig+0x508>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002800:	f7fe f8bc 	bl	800097c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe f8b8 	bl	800097c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e17a      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_RCC_OscConfig+0x508>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x4d8>
 800282e:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800283e:	e029      	b.n	8002894 <HAL_RCC_OscConfig+0x52c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d115      	bne.n	8002874 <HAL_RCC_OscConfig+0x50c>
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4a07      	ldr	r2, [pc, #28]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	4a03      	ldr	r2, [pc, #12]	@ (800286c <HAL_RCC_OscConfig+0x504>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x52c>
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
 8002874:	4b9c      	ldr	r3, [pc, #624]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002884:	4b98      	ldr	r3, [pc, #608]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	4a97      	ldr	r2, [pc, #604]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe f86e 	bl	800097c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe f86a 	bl	800097c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e12a      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ed      	beq.n	80028a4 <HAL_RCC_OscConfig+0x53c>
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe f857 	bl	800097c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe f853 	bl	800097c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e113      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ed      	bne.n	80028d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	4a79      	ldr	r2, [pc, #484]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80fe 	beq.w	8002b0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 80d0 	bne.w	8002abc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800291c:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	429a      	cmp	r2, r3
 800292e:	d130      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	3b01      	subs	r3, #1
 800293c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d127      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11f      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800295c:	2a07      	cmp	r2, #7
 800295e:	bf14      	ite	ne
 8002960:	2201      	movne	r2, #1
 8002962:	2200      	moveq	r2, #0
 8002964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d109      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d06e      	beq.n	8002a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d069      	beq.n	8002a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002998:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029a4:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0ad      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c0:	f7fd ffdc 	bl	800097c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fd ffd8 	bl	800097c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e09a      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029da:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e6:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <HAL_RCC_OscConfig+0x784>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a00:	0212      	lsls	r2, r2, #8
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0552      	lsls	r2, r2, #21
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a14:	0852      	lsrs	r2, r2, #1
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0652      	lsls	r2, r2, #25
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a20:	0912      	lsrs	r2, r2, #4
 8002a22:	0452      	lsls	r2, r2, #17
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4930      	ldr	r1, [pc, #192]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a44:	f7fd ff9a 	bl	800097c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fd ff96 	bl	800097c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e058      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6a:	e050      	b.n	8002b0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e04f      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d148      	bne.n	8002b0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a94:	f7fd ff72 	bl	800097c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fd ff6e 	bl	800097c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e030      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x734>
 8002aba:	e028      	b.n	8002b0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d023      	beq.n	8002b0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fd ff55 	bl	800097c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad4:	e00c      	b.n	8002af0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fd ff51 	bl	800097c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d905      	bls.n	8002af0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RCC_OscConfig+0x7b0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1ec      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x7b0>)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	4905      	ldr	r1, [pc, #20]	@ (8002b18 <HAL_RCC_OscConfig+0x7b0>)
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x7b4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	e001      	b.n	8002b0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	feeefffc 	.word	0xfeeefffc

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0e7      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d910      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b72      	ldr	r3, [pc, #456]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4970      	ldr	r1, [pc, #448]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b6e      	ldr	r3, [pc, #440]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cf      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b66      	ldr	r3, [pc, #408]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d908      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4960      	ldr	r1, [pc, #384]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04c      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0a6      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	4b54      	ldr	r3, [pc, #336]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e09a      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e08e      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e086      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4943      	ldr	r1, [pc, #268]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fd feb8 	bl	800097c <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fd feb4 	bl	800097c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e06e      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d208      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	492b      	ldr	r1, [pc, #172]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d210      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0207 	bic.w	r2, r3, #7
 8002c7c:	4923      	ldr	r1, [pc, #140]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e036      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4918      	ldr	r1, [pc, #96]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4910      	ldr	r1, [pc, #64]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd4:	f000 f824 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	490b      	ldr	r1, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f4>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1fc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fdef 	bl	80008dc <HAL_InitTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08007e08 	.word	0x08007e08
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d11e      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d54:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d60:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da4:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d134      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d003      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xac>
 8002dc4:	e005      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc8:	617b      	str	r3, [r7, #20]
      break;
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dce:	617b      	str	r3, [r7, #20]
      break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	617b      	str	r3, [r7, #20]
      break;
 8002dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	0e5b      	lsrs	r3, r3, #25
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08007e20 	.word	0x08007e20
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08007e18 	.word	0x08007e18

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e80:	f7ff ffda 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08007e18 	.word	0x08007e18

08002ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec0:	f7ff f9de 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8002ec4:	6178      	str	r0, [r7, #20]
 8002ec6:	e014      	b.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	4a24      	ldr	r2, [pc, #144]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee0:	f7ff f9ce 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8002ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	4a1d      	ldr	r2, [pc, #116]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef8:	d10b      	bne.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d919      	bls.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f04:	d902      	bls.n	8002f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f06:	2302      	movs	r3, #2
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e013      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e010      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d902      	bls.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f18:	2303      	movs	r3, #3
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e00a      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b80      	cmp	r3, #128	@ 0x80
 8002f22:	d102      	bne.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f24:	2302      	movs	r3, #2
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e004      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b70      	cmp	r3, #112	@ 0x70
 8002f2e:	d101      	bne.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f30:	2301      	movs	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	4909      	ldr	r1, [pc, #36]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40022000 	.word	0x40022000

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d041      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f8c:	d02a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f92:	d824      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f9e:	d81e      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002faa:	e018      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fac:	4b86      	ldr	r3, [pc, #536]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a85      	ldr	r2, [pc, #532]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fabb 	bl	800353c <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fca:	e00c      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3320      	adds	r3, #32
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fba6 	bl	8003724 <RCCEx_PLLSAI2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fec:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ffa:	4973      	ldr	r1, [pc, #460]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003002:	e001      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d041      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800301c:	d02a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800301e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003022:	d824      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800302a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800302e:	d81e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003038:	d010      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800303a:	e018      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800303c:	4b62      	ldr	r3, [pc, #392]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a61      	ldr	r2, [pc, #388]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003048:	e015      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fa73 	bl	800353c <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305a:	e00c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3320      	adds	r3, #32
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fb5e 	bl	8003724 <RCCEx_PLLSAI2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	74fb      	strb	r3, [r7, #19]
      break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800307c:	4b52      	ldr	r3, [pc, #328]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800308a:	494f      	ldr	r1, [pc, #316]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a0 	beq.w	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	4a40      	ldr	r2, [pc, #256]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80030cc:	4b3e      	ldr	r3, [pc, #248]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030dc:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e8:	f7fd fc48 	bl	800097c <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fd fc44 	bl	800097c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d902      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	74fb      	strb	r3, [r7, #19]
        break;
 8003102:	e005      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003104:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ef      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d15c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003116:	4b2c      	ldr	r3, [pc, #176]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d019      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003134:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003140:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	4a20      	ldr	r2, [pc, #128]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003150:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003160:	4a19      	ldr	r2, [pc, #100]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fd fc03 	bl	800097c <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	e00b      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fd fbff 	bl	800097c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d902      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	74fb      	strb	r3, [r7, #19]
            break;
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ec      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b6:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031be:	e009      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
 80031c4:	e006      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d4:	7c7b      	ldrb	r3, [r7, #17]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b9e      	ldr	r3, [pc, #632]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	4a9d      	ldr	r2, [pc, #628]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f2:	4b98      	ldr	r3, [pc, #608]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	f023 0203 	bic.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	4994      	ldr	r1, [pc, #592]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003214:	4b8f      	ldr	r3, [pc, #572]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	f023 020c 	bic.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	498c      	ldr	r1, [pc, #560]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003236:	4b87      	ldr	r3, [pc, #540]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	4983      	ldr	r1, [pc, #524]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003258:	4b7e      	ldr	r3, [pc, #504]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	497b      	ldr	r1, [pc, #492]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327a:	4b76      	ldr	r3, [pc, #472]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	4972      	ldr	r1, [pc, #456]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800329c:	4b6d      	ldr	r3, [pc, #436]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	496a      	ldr	r1, [pc, #424]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	4961      	ldr	r1, [pc, #388]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	4959      	ldr	r1, [pc, #356]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003302:	4b54      	ldr	r3, [pc, #336]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003308:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	4950      	ldr	r1, [pc, #320]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	4948      	ldr	r1, [pc, #288]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003346:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	493f      	ldr	r1, [pc, #252]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d028      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003368:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003376:	4937      	ldr	r1, [pc, #220]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003386:	d106      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003388:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	e011      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800339e:	d10c      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	2101      	movs	r1, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f8c8 	bl	800353c <RCCEx_PLLSAI1_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d028      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033c6:	4b23      	ldr	r3, [pc, #140]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	491f      	ldr	r1, [pc, #124]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f0:	60d3      	str	r3, [r2, #12]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f899 	bl	800353c <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d02b      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003432:	4908      	ldr	r1, [pc, #32]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003442:	d109      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a02      	ldr	r2, [pc, #8]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344e:	60d3      	str	r3, [r2, #12]
 8003450:	e014      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003460:	d10c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f867 	bl	800353c <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02f      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003488:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003496:	4928      	ldr	r1, [pc, #160]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034a6:	d10d      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f844 	bl	800353c <RCCEx_PLLSAI1_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	74bb      	strb	r3, [r7, #18]
 80034c2:	e011      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3320      	adds	r3, #32
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f925 	bl	8003724 <RCCEx_PLLSAI2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034f4:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003502:	490d      	ldr	r1, [pc, #52]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003526:	4904      	ldr	r1, [pc, #16]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800352e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000

0800353c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800354a:	4b75      	ldr	r3, [pc, #468]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d018      	beq.n	8003588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003556:	4b72      	ldr	r3, [pc, #456]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0203 	and.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d10d      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
       ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800356e:	4b6c      	ldr	r3, [pc, #432]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
       ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d047      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e044      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d018      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x86>
 8003590:	2b03      	cmp	r3, #3
 8003592:	d825      	bhi.n	80035e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003594:	2b01      	cmp	r3, #1
 8003596:	d002      	beq.n	800359e <RCCEx_PLLSAI1_Config+0x62>
 8003598:	2b02      	cmp	r3, #2
 800359a:	d009      	beq.n	80035b0 <RCCEx_PLLSAI1_Config+0x74>
 800359c:	e020      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800359e:	4b60      	ldr	r3, [pc, #384]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11d      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ae:	e01a      	b.n	80035e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c0:	e013      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c2:	4b57      	ldr	r3, [pc, #348]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ce:	4b54      	ldr	r3, [pc, #336]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035de:	e006      	b.n	80035ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      break;
 80035e4:	e004      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	430b      	orrs	r3, r1
 800360c:	4944      	ldr	r1, [pc, #272]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d17d      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003618:	4b41      	ldr	r3, [pc, #260]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a40      	ldr	r2, [pc, #256]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fd f9aa 	bl	800097c <HAL_GetTick>
 8003628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800362a:	e009      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362c:	f7fd f9a6 	bl	800097c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	73fb      	strb	r3, [r7, #15]
        break;
 800363e:	e005      	b.n	800364c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003640:	4b37      	ldr	r3, [pc, #220]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ef      	bne.n	800362c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d160      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003658:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	0211      	lsls	r1, r2, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	0912      	lsrs	r2, r2, #4
 8003670:	0452      	lsls	r2, r2, #17
 8003672:	430a      	orrs	r2, r1
 8003674:	492a      	ldr	r1, [pc, #168]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]
 800367a:	e027      	b.n	80036cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d112      	bne.n	80036a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800368a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	0211      	lsls	r1, r2, #8
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6912      	ldr	r2, [r2, #16]
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	3a01      	subs	r2, #1
 800369c:	0552      	lsls	r2, r2, #21
 800369e:	430a      	orrs	r2, r1
 80036a0:	491f      	ldr	r1, [pc, #124]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]
 80036a6:	e011      	b.n	80036cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	0211      	lsls	r1, r2, #8
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6952      	ldr	r2, [r2, #20]
 80036be:	0852      	lsrs	r2, r2, #1
 80036c0:	3a01      	subs	r2, #1
 80036c2:	0652      	lsls	r2, r2, #25
 80036c4:	430a      	orrs	r2, r1
 80036c6:	4916      	ldr	r1, [pc, #88]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fd f950 	bl	800097c <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036de:	e009      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e0:	f7fd f94c 	bl	800097c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	73fb      	strb	r3, [r7, #15]
          break;
 80036f2:	e005      	b.n	8003700 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	4904      	ldr	r1, [pc, #16]	@ (8003720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000

08003724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003732:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800373e:	4b67      	ldr	r3, [pc, #412]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10d      	bne.n	800376a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
       ||
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003756:	4b61      	ldr	r3, [pc, #388]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
       ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d047      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e044      	b.n	80037fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d018      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x86>
 8003778:	2b03      	cmp	r3, #3
 800377a:	d825      	bhi.n	80037c8 <RCCEx_PLLSAI2_Config+0xa4>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d002      	beq.n	8003786 <RCCEx_PLLSAI2_Config+0x62>
 8003780:	2b02      	cmp	r3, #2
 8003782:	d009      	beq.n	8003798 <RCCEx_PLLSAI2_Config+0x74>
 8003784:	e020      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003786:	4b55      	ldr	r3, [pc, #340]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11d      	bne.n	80037ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003796:	e01a      	b.n	80037ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003798:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e013      	b.n	80037d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037aa:	4b4c      	ldr	r3, [pc, #304]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c6:	e006      	b.n	80037d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037de:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	430b      	orrs	r3, r1
 80037f4:	4939      	ldr	r1, [pc, #228]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d167      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd f8b6 	bl	800097c <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003814:	f7fd f8b2 	bl	800097c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
        break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003828:	4b2c      	ldr	r3, [pc, #176]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ef      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d14a      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	0211      	lsls	r1, r2, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	0912      	lsrs	r2, r2, #4
 8003858:	0452      	lsls	r2, r2, #17
 800385a:	430a      	orrs	r2, r1
 800385c:	491f      	ldr	r1, [pc, #124]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	614b      	str	r3, [r1, #20]
 8003862:	e011      	b.n	8003888 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800386c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6912      	ldr	r2, [r2, #16]
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	430a      	orrs	r2, r1
 8003882:	4916      	ldr	r1, [pc, #88]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fd f872 	bl	800097c <HAL_GetTick>
 8003898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800389a:	e009      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800389c:	f7fd f86e 	bl	800097c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d902      	bls.n	80038b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	73fb      	strb	r3, [r7, #15]
          break;
 80038ae:	e005      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4904      	ldr	r1, [pc, #16]	@ (80038dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e040      	b.n	8003974 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fc fef8 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fae0 	bl	8003eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f825 	bl	800397c <UART_SetConfig>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e01b      	b.n	8003974 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fb5f 	bl	8004030 <UART_CheckIdleState>
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b08a      	sub	sp, #40	@ 0x28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4ba4      	ldr	r3, [pc, #656]	@ (8003c3c <UART_SetConfig+0x2c0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a99      	ldr	r2, [pc, #612]	@ (8003c40 <UART_SetConfig+0x2c4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	4313      	orrs	r3, r2
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a90      	ldr	r2, [pc, #576]	@ (8003c44 <UART_SetConfig+0x2c8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d126      	bne.n	8003a54 <UART_SetConfig+0xd8>
 8003a06:	4b90      	ldr	r3, [pc, #576]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d81b      	bhi.n	8003a4c <UART_SetConfig+0xd0>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <UART_SetConfig+0xa0>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3d 	.word	0x08003a3d
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a32:	e116      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3a:	e112      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e10e      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4a:	e10a      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a52:	e106      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7c      	ldr	r2, [pc, #496]	@ (8003c4c <UART_SetConfig+0x2d0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d138      	bne.n	8003ad0 <UART_SetConfig+0x154>
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d82d      	bhi.n	8003ac8 <UART_SetConfig+0x14c>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0xf8>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ac9 	.word	0x08003ac9
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac1 	.word	0x08003ac1
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aae:	e0d8      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab6:	e0d4      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003abe:	e0d0      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac6:	e0cc      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ace:	e0c8      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d125      	bne.n	8003b26 <UART_SetConfig+0x1aa>
 8003ada:	4b5b      	ldr	r3, [pc, #364]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d016      	beq.n	8003b16 <UART_SetConfig+0x19a>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	d818      	bhi.n	8003b1e <UART_SetConfig+0x1a2>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d00a      	beq.n	8003b06 <UART_SetConfig+0x18a>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d814      	bhi.n	8003b1e <UART_SetConfig+0x1a2>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <UART_SetConfig+0x182>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d008      	beq.n	8003b0e <UART_SetConfig+0x192>
 8003afc:	e00f      	b.n	8003b1e <UART_SetConfig+0x1a2>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b04:	e0ad      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b06:	2302      	movs	r3, #2
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0c:	e0a9      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b14:	e0a5      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b16:	2308      	movs	r3, #8
 8003b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1c:	e0a1      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b1e:	2310      	movs	r3, #16
 8003b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b24:	e09d      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c54 <UART_SetConfig+0x2d8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d125      	bne.n	8003b7c <UART_SetConfig+0x200>
 8003b30:	4b45      	ldr	r3, [pc, #276]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b3c:	d016      	beq.n	8003b6c <UART_SetConfig+0x1f0>
 8003b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b40:	d818      	bhi.n	8003b74 <UART_SetConfig+0x1f8>
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d00a      	beq.n	8003b5c <UART_SetConfig+0x1e0>
 8003b46:	2b80      	cmp	r3, #128	@ 0x80
 8003b48:	d814      	bhi.n	8003b74 <UART_SetConfig+0x1f8>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <UART_SetConfig+0x1d8>
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x1e8>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x1f8>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5a:	e082      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b62:	e07e      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6a:	e07a      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b72:	e076      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7a:	e072      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <UART_SetConfig+0x2dc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d12a      	bne.n	8003bdc <UART_SetConfig+0x260>
 8003b86:	4b30      	ldr	r3, [pc, #192]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b94:	d01a      	beq.n	8003bcc <UART_SetConfig+0x250>
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b9a:	d81b      	bhi.n	8003bd4 <UART_SetConfig+0x258>
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba0:	d00c      	beq.n	8003bbc <UART_SetConfig+0x240>
 8003ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba6:	d815      	bhi.n	8003bd4 <UART_SetConfig+0x258>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <UART_SetConfig+0x238>
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb0:	d008      	beq.n	8003bc4 <UART_SetConfig+0x248>
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x258>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e052      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	e04e      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e04a      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e046      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e042      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <UART_SetConfig+0x2c4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d13a      	bne.n	8003c5c <UART_SetConfig+0x2e0>
 8003be6:	4b18      	ldr	r3, [pc, #96]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bf4:	d01a      	beq.n	8003c2c <UART_SetConfig+0x2b0>
 8003bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bfa:	d81b      	bhi.n	8003c34 <UART_SetConfig+0x2b8>
 8003bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c00:	d00c      	beq.n	8003c1c <UART_SetConfig+0x2a0>
 8003c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c06:	d815      	bhi.n	8003c34 <UART_SetConfig+0x2b8>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <UART_SetConfig+0x298>
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c10:	d008      	beq.n	8003c24 <UART_SetConfig+0x2a8>
 8003c12:	e00f      	b.n	8003c34 <UART_SetConfig+0x2b8>
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e022      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e01e      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003c24:	2304      	movs	r3, #4
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	e01a      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e016      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003c34:	2310      	movs	r3, #16
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3a:	e012      	b.n	8003c62 <UART_SetConfig+0x2e6>
 8003c3c:	efff69f3 	.word	0xefff69f3
 8003c40:	40008000 	.word	0x40008000
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40004800 	.word	0x40004800
 8003c54:	40004c00 	.word	0x40004c00
 8003c58:	40005000 	.word	0x40005000
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a9f      	ldr	r2, [pc, #636]	@ (8003ee4 <UART_SetConfig+0x568>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d17a      	bne.n	8003d62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d824      	bhi.n	8003cbe <UART_SetConfig+0x342>
 8003c74:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <UART_SetConfig+0x300>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003cbf 	.word	0x08003cbf
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003caf 	.word	0x08003caf
 8003c90:	08003cbf 	.word	0x08003cbf
 8003c94:	08003cbf 	.word	0x08003cbf
 8003c98:	08003cbf 	.word	0x08003cbf
 8003c9c:	08003cb7 	.word	0x08003cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7ff f8d6 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	61f8      	str	r0, [r7, #28]
        break;
 8003ca6:	e010      	b.n	8003cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee8 <UART_SetConfig+0x56c>)
 8003caa:	61fb      	str	r3, [r7, #28]
        break;
 8003cac:	e00d      	b.n	8003cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7ff f837 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8003cb2:	61f8      	str	r0, [r7, #28]
        break;
 8003cb4:	e009      	b.n	8003cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cba:	61fb      	str	r3, [r7, #28]
        break;
 8003cbc:	e005      	b.n	8003cca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80fb 	beq.w	8003ec8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d305      	bcc.n	8003cee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d903      	bls.n	8003cf6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf4:	e0e8      	b.n	8003ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	4615      	mov	r5, r2
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	022b      	lsls	r3, r5, #8
 8003d08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d0c:	0222      	lsls	r2, r4, #8
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	6849      	ldr	r1, [r1, #4]
 8003d12:	0849      	lsrs	r1, r1, #1
 8003d14:	2000      	movs	r0, #0
 8003d16:	4688      	mov	r8, r1
 8003d18:	4681      	mov	r9, r0
 8003d1a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d1e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d30:	4650      	mov	r0, sl
 8003d32:	4659      	mov	r1, fp
 8003d34:	f7fc fa48 	bl	80001c8 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d46:	d308      	bcc.n	8003d5a <UART_SetConfig+0x3de>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4e:	d204      	bcs.n	8003d5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	e0b6      	b.n	8003ec8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d60:	e0b2      	b.n	8003ec8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6a:	d15e      	bne.n	8003e2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d828      	bhi.n	8003dc6 <UART_SetConfig+0x44a>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <UART_SetConfig+0x400>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003dc7 	.word	0x08003dc7
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dc7 	.word	0x08003dc7
 8003d98:	08003dc7 	.word	0x08003dc7
 8003d9c:	08003dbf 	.word	0x08003dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7ff f856 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003da4:	61f8      	str	r0, [r7, #28]
        break;
 8003da6:	e014      	b.n	8003dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7ff f868 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8003dac:	61f8      	str	r0, [r7, #28]
        break;
 8003dae:	e010      	b.n	8003dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee8 <UART_SetConfig+0x56c>)
 8003db2:	61fb      	str	r3, [r7, #28]
        break;
 8003db4:	e00d      	b.n	8003dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db6:	f7fe ffb3 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8003dba:	61f8      	str	r0, [r7, #28]
        break;
 8003dbc:	e009      	b.n	8003dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc2:	61fb      	str	r3, [r7, #28]
        break;
 8003dc4:	e005      	b.n	8003dd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d077      	beq.n	8003ec8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005a      	lsls	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	441a      	add	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d916      	bls.n	8003e22 <UART_SetConfig+0x4a6>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfa:	d212      	bcs.n	8003e22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f023 030f 	bic.w	r3, r3, #15
 8003e04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	8afa      	ldrh	r2, [r7, #22]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e052      	b.n	8003ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e28:	e04e      	b.n	8003ec8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d827      	bhi.n	8003e82 <UART_SetConfig+0x506>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x4bc>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7fe fff8 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003e60:	61f8      	str	r0, [r7, #28]
        break;
 8003e62:	e014      	b.n	8003e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7ff f80a 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8003e68:	61f8      	str	r0, [r7, #28]
        break;
 8003e6a:	e010      	b.n	8003e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <UART_SetConfig+0x56c>)
 8003e6e:	61fb      	str	r3, [r7, #28]
        break;
 8003e70:	e00d      	b.n	8003e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7fe ff55 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8003e76:	61f8      	str	r0, [r7, #28]
        break;
 8003e78:	e009      	b.n	8003e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	61fb      	str	r3, [r7, #28]
        break;
 8003e80:	e005      	b.n	8003e8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d019      	beq.n	8003ec8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	085a      	lsrs	r2, r3, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d909      	bls.n	8003ec2 <UART_SetConfig+0x546>
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d205      	bcs.n	8003ec2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e002      	b.n	8003ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	00f42400 	.word	0x00f42400

08003eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01a      	beq.n	8004002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fea:	d10a      	bne.n	8004002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b098      	sub	sp, #96	@ 0x60
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004040:	f7fc fc9c 	bl	800097c <HAL_GetTick>
 8004044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d12e      	bne.n	80040b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f88c 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d021      	beq.n	80040b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004082:	653b      	str	r3, [r7, #80]	@ 0x50
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e062      	b.n	8004178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d149      	bne.n	8004154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f856 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d03c      	beq.n	8004154 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	623b      	str	r3, [r7, #32]
   return(result);
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e6      	bne.n	80040da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60fb      	str	r3, [r7, #12]
   return(result);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800412c:	61fa      	str	r2, [r7, #28]
 800412e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	617b      	str	r3, [r7, #20]
   return(result);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e011      	b.n	8004178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3758      	adds	r7, #88	@ 0x58
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004190:	e04f      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d04b      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fc fbef 	bl	800097c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e04e      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d037      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b80      	cmp	r3, #128	@ 0x80
 80041c6:	d034      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	d031      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d110      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2208      	movs	r2, #8
 80041e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f838 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2208      	movs	r2, #8
 80041ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e029      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420c:	d111      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f81e 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e00f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0a0      	beq.n	8004192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b095      	sub	sp, #84	@ 0x54
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
 8004282:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d118      	bne.n	8004302 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004316:	bf00      	nop
 8004318:	3754      	adds	r7, #84	@ 0x54
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004322:	b084      	sub	sp, #16
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	f107 001c 	add.w	r0, r7, #28
 8004330:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f001 fa25 	bl	8005790 <USB_CoreReset>
 8004346:	4603      	mov	r3, r0
 8004348:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800434a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	@ 0x38
 800435e:	e005      	b.n	800436c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004378:	b004      	add	sp, #16
 800437a:	4770      	bx	lr

0800437c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d165      	bne.n	800445c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a3e      	ldr	r2, [pc, #248]	@ (800448c <USB_SetTurnaroundTime+0x110>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d906      	bls.n	80043a6 <USB_SetTurnaroundTime+0x2a>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a3d      	ldr	r2, [pc, #244]	@ (8004490 <USB_SetTurnaroundTime+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d202      	bcs.n	80043a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043a0:	230f      	movs	r3, #15
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e05c      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a39      	ldr	r2, [pc, #228]	@ (8004490 <USB_SetTurnaroundTime+0x114>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d306      	bcc.n	80043bc <USB_SetTurnaroundTime+0x40>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a38      	ldr	r2, [pc, #224]	@ (8004494 <USB_SetTurnaroundTime+0x118>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d202      	bcs.n	80043bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043b6:	230e      	movs	r3, #14
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e051      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a35      	ldr	r2, [pc, #212]	@ (8004494 <USB_SetTurnaroundTime+0x118>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d306      	bcc.n	80043d2 <USB_SetTurnaroundTime+0x56>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a34      	ldr	r2, [pc, #208]	@ (8004498 <USB_SetTurnaroundTime+0x11c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d202      	bcs.n	80043d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043cc:	230d      	movs	r3, #13
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e046      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a30      	ldr	r2, [pc, #192]	@ (8004498 <USB_SetTurnaroundTime+0x11c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d306      	bcc.n	80043e8 <USB_SetTurnaroundTime+0x6c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <USB_SetTurnaroundTime+0x120>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d802      	bhi.n	80043e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043e2:	230c      	movs	r3, #12
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e03b      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	@ (800449c <USB_SetTurnaroundTime+0x120>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d906      	bls.n	80043fe <USB_SetTurnaroundTime+0x82>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a2b      	ldr	r2, [pc, #172]	@ (80044a0 <USB_SetTurnaroundTime+0x124>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d802      	bhi.n	80043fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043f8:	230b      	movs	r3, #11
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e030      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <USB_SetTurnaroundTime+0x124>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d906      	bls.n	8004414 <USB_SetTurnaroundTime+0x98>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <USB_SetTurnaroundTime+0x128>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d802      	bhi.n	8004414 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800440e:	230a      	movs	r3, #10
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e025      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <USB_SetTurnaroundTime+0x128>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d906      	bls.n	800442a <USB_SetTurnaroundTime+0xae>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <USB_SetTurnaroundTime+0x12c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d202      	bcs.n	800442a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004424:	2309      	movs	r3, #9
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e01a      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a1e      	ldr	r2, [pc, #120]	@ (80044a8 <USB_SetTurnaroundTime+0x12c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d306      	bcc.n	8004440 <USB_SetTurnaroundTime+0xc4>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <USB_SetTurnaroundTime+0x130>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d802      	bhi.n	8004440 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800443a:	2308      	movs	r3, #8
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e00f      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a1a      	ldr	r2, [pc, #104]	@ (80044ac <USB_SetTurnaroundTime+0x130>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d906      	bls.n	8004456 <USB_SetTurnaroundTime+0xda>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <USB_SetTurnaroundTime+0x134>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d202      	bcs.n	8004456 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004450:	2307      	movs	r3, #7
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e004      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004456:	2306      	movs	r3, #6
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e001      	b.n	8004460 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800445c:	2309      	movs	r3, #9
 800445e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00d8acbf 	.word	0x00d8acbf
 8004490:	00e4e1c0 	.word	0x00e4e1c0
 8004494:	00f42400 	.word	0x00f42400
 8004498:	01067380 	.word	0x01067380
 800449c:	011a499f 	.word	0x011a499f
 80044a0:	01312cff 	.word	0x01312cff
 80044a4:	014ca43f 	.word	0x014ca43f
 80044a8:	016e3600 	.word	0x016e3600
 80044ac:	01a6ab1f 	.word	0x01a6ab1f
 80044b0:	01e84800 	.word	0x01e84800

080044b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d115      	bne.n	8004546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004526:	200a      	movs	r0, #10
 8004528:	f7fc fa34 	bl	8000994 <HAL_Delay>
      ms += 10U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	330a      	adds	r3, #10
 8004530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f8b3 	bl	800569e <USB_GetMode>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d01e      	beq.n	800457c <USB_SetCurrentMode+0x84>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2bc7      	cmp	r3, #199	@ 0xc7
 8004542:	d9f0      	bls.n	8004526 <USB_SetCurrentMode+0x2e>
 8004544:	e01a      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d115      	bne.n	8004578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004558:	200a      	movs	r0, #10
 800455a:	f7fc fa1b 	bl	8000994 <HAL_Delay>
      ms += 10U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	330a      	adds	r3, #10
 8004562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f89a 	bl	800569e <USB_GetMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <USB_SetCurrentMode+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2bc7      	cmp	r3, #199	@ 0xc7
 8004574:	d9f0      	bls.n	8004558 <USB_SetCurrentMode+0x60>
 8004576:	e001      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e005      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004580:	d101      	bne.n	8004586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e009      	b.n	80045c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3340      	adds	r3, #64	@ 0x40
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0e      	cmp	r3, #14
 80045c8:	d9f2      	bls.n	80045b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11c      	bne.n	800460c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e005      	b.n	8004618 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800461e:	461a      	mov	r2, r3
 8004620:	2300      	movs	r3, #0
 8004622:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004624:	2103      	movs	r1, #3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f95a 	bl	80048e0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800462c:	2110      	movs	r1, #16
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8f6 	bl	8004820 <USB_FlushTxFifo>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f920 	bl	8004884 <USB_FlushRxFifo>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004654:	461a      	mov	r2, r3
 8004656:	2300      	movs	r3, #0
 8004658:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004660:	461a      	mov	r2, r3
 8004662:	2300      	movs	r3, #0
 8004664:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466c:	461a      	mov	r2, r3
 800466e:	2300      	movs	r3, #0
 8004670:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e043      	b.n	8004700 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800468a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800468e:	d118      	bne.n	80046c2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e013      	b.n	80046d4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	461a      	mov	r2, r3
 80046ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e008      	b.n	80046d4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3301      	adds	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004704:	461a      	mov	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4293      	cmp	r3, r2
 800470a:	d3b5      	bcc.n	8004678 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e043      	b.n	800479a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004728:	d118      	bne.n	800475c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e013      	b.n	800476e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e008      	b.n	800476e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	461a      	mov	r2, r3
 800478e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3301      	adds	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800479e:	461a      	mov	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d3b5      	bcc.n	8004712 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	4b10      	ldr	r3, [pc, #64]	@ (800481c <USB_DevInit+0x28c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f043 0208 	orr.w	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004818:	b004      	add	sp, #16
 800481a:	4770      	bx	lr
 800481c:	803c3800 	.word	0x803c3800

08004820 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800483a:	d901      	bls.n	8004840 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e01b      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	daf2      	bge.n	800482e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	019b      	lsls	r3, r3, #6
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004864:	d901      	bls.n	800486a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e006      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d0f0      	beq.n	8004858 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489c:	d901      	bls.n	80048a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e018      	b.n	80048d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	daf2      	bge.n	8004890 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2210      	movs	r2, #16
 80048b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c0:	d901      	bls.n	80048c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d0f0      	beq.n	80048b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d002      	beq.n	8004938 <USB_GetDevSpeed+0x26>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d102      	bne.n	800493e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004938:	2302      	movs	r3, #2
 800493a:	75fb      	strb	r3, [r7, #23]
 800493c:	e001      	b.n	8004942 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800493e:	230f      	movs	r3, #15
 8004940:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d13a      	bne.n	80049e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800498a:	4313      	orrs	r3, r2
 800498c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d155      	bne.n	8004a50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	059b      	lsls	r3, r3, #22
 80049c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c8:	4313      	orrs	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e036      	b.n	8004a50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11a      	bne.n	8004a50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a36:	430b      	orrs	r3, r1
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d161      	bne.n	8004b40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a92:	d11f      	bne.n	8004ad4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ab2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004af4:	4013      	ands	r3, r2
 8004af6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	440b      	add	r3, r1
 8004b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b36:	4619      	mov	r1, r3
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <USB_DeactivateEndpoint+0x1b0>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
 8004b3e:	e060      	b.n	8004c02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b56:	d11f      	bne.n	8004b98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bb8:	4013      	ands	r3, r2
 8004bba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <USB_DeactivateEndpoint+0x1b4>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	ec337800 	.word	0xec337800
 8004c14:	eff37800 	.word	0xeff37800

08004c18 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 812d 	bne.w	8004e90 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d132      	bne.n	8004ca4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c9c:	0cdb      	lsrs	r3, r3, #19
 8004c9e:	04db      	lsls	r3, r3, #19
 8004ca0:	6113      	str	r3, [r2, #16]
 8004ca2:	e097      	b.n	8004dd4 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cbe:	0cdb      	lsrs	r3, r3, #19
 8004cc0:	04db      	lsls	r3, r3, #19
 8004cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ce2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ce6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11a      	bne.n	8004d24 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d903      	bls.n	8004d02 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d20:	6113      	str	r3, [r2, #16]
 8004d22:	e044      	b.n	8004dae <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	89fb      	ldrh	r3, [r7, #14]
 8004d4a:	04d9      	lsls	r1, r3, #19
 8004d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f8c <USB_EPStartXfer+0x374>)
 8004d4e:	400b      	ands	r3, r1
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	0148      	lsls	r0, r1, #5
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	4401      	add	r1, r0
 8004d58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d122      	bne.n	8004dae <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d82:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d86:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	89fb      	ldrh	r3, [r7, #14]
 8004d98:	075b      	lsls	r3, r3, #29
 8004d9a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004d9e:	6939      	ldr	r1, [r7, #16]
 8004da0:	0148      	lsls	r0, r1, #5
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	4401      	add	r1, r0
 8004da6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004daa:	4313      	orrs	r3, r2
 8004dac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc4:	6939      	ldr	r1, [r7, #16]
 8004dc6:	0148      	lsls	r0, r1, #5
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	4401      	add	r1, r0
 8004dcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	791b      	ldrb	r3, [r3, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d015      	beq.n	8004e28 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 813a 	beq.w	800507a <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	2101      	movs	r1, #1
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e22:	4313      	orrs	r3, r2
 8004e24:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e26:	e128      	b.n	800507a <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d110      	bne.n	8004e5a <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e00f      	b.n	8004e7a <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68d9      	ldr	r1, [r3, #12]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f9a7 	bl	80051dc <USB_WritePacket>
 8004e8e:	e0f4      	b.n	800507a <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eaa:	0cdb      	lsrs	r3, r3, #19
 8004eac:	04db      	lsls	r3, r3, #19
 8004eae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ece:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ed2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d12f      	bne.n	8004f3a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f08:	6939      	ldr	r1, [r7, #16]
 8004f0a:	0148      	lsls	r0, r1, #5
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	4401      	add	r1, r0
 8004f10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f36:	6113      	str	r3, [r2, #16]
 8004f38:	e062      	b.n	8005000 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d126      	bne.n	8004f90 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f58:	6939      	ldr	r1, [r7, #16]
 8004f5a:	0148      	lsls	r0, r1, #5
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	4401      	add	r1, r0
 8004f60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f64:	4313      	orrs	r3, r2
 8004f66:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f86:	6113      	str	r3, [r2, #16]
 8004f88:	e03a      	b.n	8005000 <USB_EPStartXfer+0x3e8>
 8004f8a:	bf00      	nop
 8004f8c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	89fa      	ldrh	r2, [r7, #14]
 8004fac:	fb03 f202 	mul.w	r2, r3, r2
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	89fb      	ldrh	r3, [r7, #14]
 8004fc4:	04d9      	lsls	r1, r3, #19
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005084 <USB_EPStartXfer+0x46c>)
 8004fc8:	400b      	ands	r3, r1
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	0148      	lsls	r0, r1, #5
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4401      	add	r1, r0
 8004fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	0148      	lsls	r0, r1, #5
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	4401      	add	r1, r0
 8004ff8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	791b      	ldrb	r3, [r3, #4]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d128      	bne.n	800505a <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d110      	bne.n	800503a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005032:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e00f      	b.n	800505a <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005058:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005074:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005078:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	1ff80000 	.word	0x1ff80000

08005088 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d14a      	bne.n	800513c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050be:	f040 8086 	bne.w	80051ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005104:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005108:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005116:	4293      	cmp	r3, r2
 8005118:	d902      	bls.n	8005120 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
          break;
 800511e:	e056      	b.n	80051ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005138:	d0e7      	beq.n	800510a <USB_EPStopXfer+0x82>
 800513a:	e048      	b.n	80051ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005154:	d13b      	bne.n	80051ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005174:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005178:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800519c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d902      	bls.n	80051b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
          break;
 80051b2:	e00c      	b.n	80051ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051cc:	d0e7      	beq.n	800519e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	460b      	mov	r3, r1
 80051ec:	71fb      	strb	r3, [r7, #7]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80051fa:	88bb      	ldrh	r3, [r7, #4]
 80051fc:	3303      	adds	r3, #3
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e018      	b.n	800523a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	031a      	lsls	r2, r3, #12
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005214:	461a      	mov	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	3301      	adds	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3e2      	bcc.n	8005208 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3724      	adds	r7, #36	@ 0x24
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005250:	b480      	push	{r7}
 8005252:	b08b      	sub	sp, #44	@ 0x2c
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	b29b      	uxth	r3, r3
 800526c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	e014      	b.n	80052a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	601a      	str	r2, [r3, #0]
    pDest++;
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	3301      	adds	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	3301      	adds	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	3301      	adds	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	3301      	adds	r3, #1
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3e6      	bcc.n	800527c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052ae:	8bfb      	ldrh	r3, [r7, #30]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01e      	beq.n	80052f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052be:	461a      	mov	r2, r3
 80052c0:	f107 0310 	add.w	r3, r7, #16
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	701a      	strb	r2, [r3, #0]
      i++;
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	3301      	adds	r3, #1
 80052de:	623b      	str	r3, [r7, #32]
      pDest++;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052e6:	8bfb      	ldrh	r3, [r7, #30]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052ec:	8bfb      	ldrh	r3, [r7, #30]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ea      	bne.n	80052c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	372c      	adds	r7, #44	@ 0x2c
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d12c      	bne.n	8005376 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	db12      	blt.n	8005354 <USB_EPSetStall+0x54>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00f      	beq.n	8005354 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800534e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005352:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800536e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e02b      	b.n	80053ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db12      	blt.n	80053ae <USB_EPSetStall+0xae>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00f      	beq.n	80053ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d128      	bne.n	800544a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005412:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005416:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	791b      	ldrb	r3, [r3, #4]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d003      	beq.n	8005428 <USB_EPClearStall+0x4c>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	791b      	ldrb	r3, [r3, #4]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d138      	bne.n	800549a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e027      	b.n	800549a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005464:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005468:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d003      	beq.n	800547a <USB_EPClearStall+0x9e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	791b      	ldrb	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d10f      	bne.n	800549a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005498:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80054ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005522:	f023 0302 	bic.w	r3, r3, #2
 8005526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005550:	f023 0303 	bic.w	r3, r3, #3
 8005554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0c1b      	lsrs	r3, r3, #16
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	b29b      	uxth	r3, r3
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005634:	68bb      	ldr	r3, [r7, #8]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005664:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	01db      	lsls	r3, r3, #7
 8005674:	b2db      	uxtb	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005690:	68bb      	ldr	r3, [r7, #8]
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	333c      	adds	r3, #60	@ 0x3c
 8005712:	3304      	adds	r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <USB_EP0_OutStart+0x8c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d90a      	bls.n	8005736 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d101      	bne.n	8005736 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e024      	b.n	8005780 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005750:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005764:	f043 0318 	orr.w	r3, r3, #24
 8005768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005778:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800577c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	4f54300a 	.word	0x4f54300a

08005790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057a8:	d901      	bls.n	80057ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01b      	b.n	80057e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	daf2      	bge.n	800579c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057d2:	d901      	bls.n	80057d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e006      	b.n	80057e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d0f0      	beq.n	80057c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005800:	2010      	movs	r0, #16
 8005802:	f002 fa8b 	bl	8007d1c <USBD_static_malloc>
 8005806:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	32b0      	adds	r2, #176	@ 0xb0
 8005818:	2100      	movs	r1, #0
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800581e:	2302      	movs	r3, #2
 8005820:	e048      	b.n	80058b4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	32b0      	adds	r2, #176	@ 0xb0
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	32b0      	adds	r2, #176	@ 0xb0
 800583c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7c1b      	ldrb	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800584e:	4b1b      	ldr	r3, [pc, #108]	@ (80058bc <USBD_HID_Init+0xc8>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	3326      	adds	r3, #38	@ 0x26
 8005864:	2207      	movs	r2, #7
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e00c      	b.n	8005884 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800586a:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <USBD_HID_Init+0xc8>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 020f 	and.w	r2, r3, #15
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	3326      	adds	r3, #38	@ 0x26
 8005880:	220a      	movs	r2, #10
 8005882:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005884:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <USBD_HID_Init+0xc8>)
 8005886:	7819      	ldrb	r1, [r3, #0]
 8005888:	2304      	movs	r3, #4
 800588a:	2203      	movs	r2, #3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f002 f845 	bl	800791c <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005892:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <USBD_HID_Init+0xc8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	3324      	adds	r3, #36	@ 0x24
 80058a8:	2201      	movs	r2, #1
 80058aa:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200000ca 	.word	0x200000ca

080058c0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80058cc:	4b1f      	ldr	r3, [pc, #124]	@ (800594c <USBD_HID_DeInit+0x8c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 f860 	bl	8007998 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <USBD_HID_DeInit+0x8c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3324      	adds	r3, #36	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80058f2:	4b16      	ldr	r3, [pc, #88]	@ (800594c <USBD_HID_DeInit+0x8c>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	3326      	adds	r3, #38	@ 0x26
 8005908:	2200      	movs	r2, #0
 800590a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	32b0      	adds	r2, #176	@ 0xb0
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	32b0      	adds	r2, #176	@ 0xb0
 8005928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592c:	4618      	mov	r0, r3
 800592e:	f002 fa03 	bl	8007d38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	32b0      	adds	r2, #176	@ 0xb0
 800593c:	2100      	movs	r1, #0
 800593e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200000ca 	.word	0x200000ca

08005950 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	32b0      	adds	r2, #176	@ 0xb0
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	e0e8      	b.n	8005b4e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005984:	2b00      	cmp	r3, #0
 8005986:	d046      	beq.n	8005a16 <USBD_HID_Setup+0xc6>
 8005988:	2b20      	cmp	r3, #32
 800598a:	f040 80d8 	bne.w	8005b3e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	3b02      	subs	r3, #2
 8005994:	2b09      	cmp	r3, #9
 8005996:	d836      	bhi.n	8005a06 <USBD_HID_Setup+0xb6>
 8005998:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <USBD_HID_Setup+0x50>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059f7 	.word	0x080059f7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	08005a07 	.word	0x08005a07
 80059ac:	08005a07 	.word	0x08005a07
 80059b0:	08005a07 	.word	0x08005a07
 80059b4:	08005a07 	.word	0x08005a07
 80059b8:	08005a07 	.word	0x08005a07
 80059bc:	08005a07 	.word	0x08005a07
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059c9 	.word	0x080059c9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	885b      	ldrh	r3, [r3, #2]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]
          break;
 80059d4:	e01e      	b.n	8005a14 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fbdf 	bl	80071a0 <USBD_CtlSendData>
          break;
 80059e2:	e017      	b.n	8005a14 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	885b      	ldrh	r3, [r3, #2]
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	605a      	str	r2, [r3, #4]
          break;
 80059f4:	e00e      	b.n	8005a14 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2201      	movs	r2, #1
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fbce 	bl	80071a0 <USBD_CtlSendData>
          break;
 8005a04:	e006      	b.n	8005a14 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fb4c 	bl	80070a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	75fb      	strb	r3, [r7, #23]
          break;
 8005a12:	bf00      	nop
      }
      break;
 8005a14:	e09a      	b.n	8005b4c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b0b      	cmp	r3, #11
 8005a1c:	f200 8086 	bhi.w	8005b2c <USBD_HID_Setup+0x1dc>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <USBD_HID_Setup+0xd8>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005b3b 	.word	0x08005b3b
 8005a30:	08005b2d 	.word	0x08005b2d
 8005a34:	08005b2d 	.word	0x08005b2d
 8005a38:	08005b2d 	.word	0x08005b2d
 8005a3c:	08005b2d 	.word	0x08005b2d
 8005a40:	08005a83 	.word	0x08005a83
 8005a44:	08005b2d 	.word	0x08005b2d
 8005a48:	08005b2d 	.word	0x08005b2d
 8005a4c:	08005b2d 	.word	0x08005b2d
 8005a50:	08005adb 	.word	0x08005adb
 8005a54:	08005b05 	.word	0x08005b05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d107      	bne.n	8005a74 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a64:	f107 030a 	add.w	r3, r7, #10
 8005a68:	2202      	movs	r2, #2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fb97 	bl	80071a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a72:	e063      	b.n	8005b3c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 fb15 	bl	80070a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a80:	e05c      	b.n	8005b3c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	885b      	ldrh	r3, [r3, #2]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b22      	cmp	r3, #34	@ 0x22
 8005a8c:	d108      	bne.n	8005aa0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	2b4a      	cmp	r3, #74	@ 0x4a
 8005a94:	bf28      	it	cs
 8005a96:	234a      	movcs	r3, #74	@ 0x4a
 8005a98:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <USBD_HID_Setup+0x208>)
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e015      	b.n	8005acc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	885b      	ldrh	r3, [r3, #2]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b21      	cmp	r3, #33	@ 0x21
 8005aaa:	d108      	bne.n	8005abe <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005aac:	4b2b      	ldr	r3, [pc, #172]	@ (8005b5c <USBD_HID_Setup+0x20c>)
 8005aae:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	88db      	ldrh	r3, [r3, #6]
 8005ab4:	2b09      	cmp	r3, #9
 8005ab6:	bf28      	it	cs
 8005ab8:	2309      	movcs	r3, #9
 8005aba:	82bb      	strh	r3, [r7, #20]
 8005abc:	e006      	b.n	8005acc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 faf0 	bl	80070a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	75fb      	strb	r3, [r7, #23]
            break;
 8005aca:	e037      	b.n	8005b3c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005acc:	8abb      	ldrh	r3, [r7, #20]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6939      	ldr	r1, [r7, #16]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fb64 	bl	80071a0 <USBD_CtlSendData>
          break;
 8005ad8:	e030      	b.n	8005b3c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d107      	bne.n	8005af6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	2201      	movs	r2, #1
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fb56 	bl	80071a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005af4:	e022      	b.n	8005b3c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 fad4 	bl	80070a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005afe:	2303      	movs	r3, #3
 8005b00:	75fb      	strb	r3, [r7, #23]
          break;
 8005b02:	e01b      	b.n	8005b3c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d106      	bne.n	8005b1e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	885b      	ldrh	r3, [r3, #2]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b1c:	e00e      	b.n	8005b3c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fac0 	bl	80070a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b26:	2303      	movs	r3, #3
 8005b28:	75fb      	strb	r3, [r7, #23]
          break;
 8005b2a:	e007      	b.n	8005b3c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fab9 	bl	80070a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	75fb      	strb	r3, [r7, #23]
          break;
 8005b38:	e000      	b.n	8005b3c <USBD_HID_Setup+0x1ec>
          break;
 8005b3a:	bf00      	nop
      }
      break;
 8005b3c:	e006      	b.n	8005b4c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fab0 	bl	80070a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000080 	.word	0x20000080
 8005b5c:	20000068 	.word	0x20000068

08005b60 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005b68:	2181      	movs	r1, #129	@ 0x81
 8005b6a:	4809      	ldr	r0, [pc, #36]	@ (8005b90 <USBD_HID_GetFSCfgDesc+0x30>)
 8005b6c:	f000 fc3b 	bl	80063e6 <USBD_GetEpDesc>
 8005b70:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2222      	movs	r2, #34	@ 0x22
 8005b82:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005b84:	4b02      	ldr	r3, [pc, #8]	@ (8005b90 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000044 	.word	0x20000044

08005b94 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005b9c:	2181      	movs	r1, #129	@ 0x81
 8005b9e:	4809      	ldr	r0, [pc, #36]	@ (8005bc4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005ba0:	f000 fc21 	bl	80063e6 <USBD_GetEpDesc>
 8005ba4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2207      	movs	r2, #7
 8005bb0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2222      	movs	r2, #34	@ 0x22
 8005bb6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005bb8:	4b02      	ldr	r3, [pc, #8]	@ (8005bc4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000044 	.word	0x20000044

08005bc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005bd0:	2181      	movs	r1, #129	@ 0x81
 8005bd2:	4809      	ldr	r0, [pc, #36]	@ (8005bf8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005bd4:	f000 fc07 	bl	80063e6 <USBD_GetEpDesc>
 8005bd8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	220a      	movs	r2, #10
 8005be4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2222      	movs	r2, #34	@ 0x22
 8005bea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005bec:	4b02      	ldr	r3, [pc, #8]	@ (8005bf8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000044 	.word	0x20000044

08005bfc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32b0      	adds	r2, #176	@ 0xb0
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	2200      	movs	r2, #0
 8005c18:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	220a      	movs	r2, #10
 8005c34:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005c36:	4b03      	ldr	r3, [pc, #12]	@ (8005c44 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000074 	.word	0x20000074

08005c48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e01f      	b.n	8005ca0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	79fa      	ldrb	r2, [r7, #7]
 8005c92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f001 fdc3 	bl	8007820 <USBD_LL_Init>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e025      	b.n	8005d0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32ae      	adds	r2, #174	@ 0xae
 8005cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00f      	beq.n	8005cfc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	32ae      	adds	r2, #174	@ 0xae
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	f107 020e 	add.w	r2, r7, #14
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 fdcb 	bl	80078b8 <USBD_LL_Start>
 8005d22:	4603      	mov	r3, r0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	4611      	mov	r1, r2
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	4611      	mov	r1, r2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 f936 	bl	8007032 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d01a      	beq.n	8005e20 <USBD_LL_SetupStage+0x72>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d822      	bhi.n	8005e34 <USBD_LL_SetupStage+0x86>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <USBD_LL_SetupStage+0x4a>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d00a      	beq.n	8005e0c <USBD_LL_SetupStage+0x5e>
 8005df6:	e01d      	b.n	8005e34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fb63 	bl	80064cc <USBD_StdDevReq>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0a:	e020      	b.n	8005e4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fbcb 	bl	80065b0 <USBD_StdItfReq>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1e:	e016      	b.n	8005e4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fc2d 	bl	8006688 <USBD_StdEPReq>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
      break;
 8005e32:	e00c      	b.n	8005e4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fdde 	bl	8007a04 <USBD_LL_StallEP>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4c:	bf00      	nop
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	460b      	mov	r3, r1
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d16e      	bne.n	8005f4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	f040 8098 	bne.w	8005fb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d913      	bls.n	8005eb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	1ad2      	subs	r2, r2, r3
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bf28      	it	cs
 8005eaa:	4613      	movcs	r3, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f001 f9a1 	bl	80071f8 <USBD_CtlContinueRx>
 8005eb6:	e07d      	b.n	8005fb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d014      	beq.n	8005ef0 <USBD_LL_DataOutStage+0x98>
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d81d      	bhi.n	8005f06 <USBD_LL_DataOutStage+0xae>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <USBD_LL_DataOutStage+0x7c>
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d003      	beq.n	8005eda <USBD_LL_DataOutStage+0x82>
 8005ed2:	e018      	b.n	8005f06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ed8:	e018      	b.n	8005f0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fa64 	bl	80063b2 <USBD_CoreFindIF>
 8005eea:	4603      	mov	r3, r0
 8005eec:	75bb      	strb	r3, [r7, #22]
            break;
 8005eee:	e00d      	b.n	8005f0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4619      	mov	r1, r3
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa66 	bl	80063cc <USBD_CoreFindEP>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75bb      	strb	r3, [r7, #22]
            break;
 8005f04:	e002      	b.n	8005f0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75bb      	strb	r3, [r7, #22]
            break;
 8005f0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f0c:	7dbb      	ldrb	r3, [r7, #22]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d119      	bne.n	8005f46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d113      	bne.n	8005f46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f1e:	7dba      	ldrb	r2, [r7, #22]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	32ae      	adds	r2, #174	@ 0xae
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f2e:	7dba      	ldrb	r2, [r7, #22]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f36:	7dba      	ldrb	r2, [r7, #22]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	32ae      	adds	r2, #174	@ 0xae
 8005f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f001 f967 	bl	800721a <USBD_CtlSendStatus>
 8005f4c:	e032      	b.n	8005fb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fa37 	bl	80063cc <USBD_CoreFindEP>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f62:	7dbb      	ldrb	r3, [r7, #22]
 8005f64:	2bff      	cmp	r3, #255	@ 0xff
 8005f66:	d025      	beq.n	8005fb4 <USBD_LL_DataOutStage+0x15c>
 8005f68:	7dbb      	ldrb	r3, [r7, #22]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d122      	bne.n	8005fb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d117      	bne.n	8005faa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f7a:	7dba      	ldrb	r2, [r7, #22]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	32ae      	adds	r2, #174	@ 0xae
 8005f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00f      	beq.n	8005faa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f8a:	7dba      	ldrb	r2, [r7, #22]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f92:	7dba      	ldrb	r2, [r7, #22]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	32ae      	adds	r2, #174	@ 0xae
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	7afa      	ldrb	r2, [r7, #11]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	4798      	blx	r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	e000      	b.n	8005fb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d16f      	bne.n	80060b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d15a      	bne.n	8006098 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d914      	bls.n	8006018 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	461a      	mov	r2, r3
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 f8e6 	bl	80071d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800600a:	2300      	movs	r3, #0
 800600c:	2200      	movs	r2, #0
 800600e:	2100      	movs	r1, #0
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f001 fdfd 	bl	8007c10 <USBD_LL_PrepareReceive>
 8006016:	e03f      	b.n	8006098 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d11c      	bne.n	800605e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800602c:	429a      	cmp	r2, r3
 800602e:	d316      	bcc.n	800605e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800603a:	429a      	cmp	r2, r3
 800603c:	d20f      	bcs.n	800605e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 f8c7 	bl	80071d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006050:	2300      	movs	r3, #0
 8006052:	2200      	movs	r2, #0
 8006054:	2100      	movs	r1, #0
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f001 fdda 	bl	8007c10 <USBD_LL_PrepareReceive>
 800605c:	e01c      	b.n	8006098 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d10f      	bne.n	800608a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800608a:	2180      	movs	r1, #128	@ 0x80
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 fcb9 	bl	8007a04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 f8d4 	bl	8007240 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d03a      	beq.n	8006118 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff fe42 	bl	8005d2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80060b0:	e032      	b.n	8006118 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f985 	bl	80063cc <USBD_CoreFindEP>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2bff      	cmp	r3, #255	@ 0xff
 80060ca:	d025      	beq.n	8006118 <USBD_LL_DataInStage+0x15a>
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d122      	bne.n	8006118 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d11c      	bne.n	8006118 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80060de:	7dfa      	ldrb	r2, [r7, #23]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	32ae      	adds	r2, #174	@ 0xae
 80060e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d014      	beq.n	8006118 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80060ee:	7dfa      	ldrb	r2, [r7, #23]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060f6:	7dfa      	ldrb	r2, [r7, #23]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	32ae      	adds	r2, #174	@ 0xae
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	7afa      	ldrb	r2, [r7, #11]
 8006104:	4611      	mov	r1, r2
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4798      	blx	r3
 800610a:	4603      	mov	r3, r0
 800610c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800610e:	7dbb      	ldrb	r3, [r7, #22]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006114:	7dbb      	ldrb	r3, [r7, #22]
 8006116:	e000      	b.n	800611a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d014      	beq.n	8006188 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6852      	ldr	r2, [r2, #4]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	4611      	mov	r1, r2
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006188:	2340      	movs	r3, #64	@ 0x40
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fbc4 	bl	800791c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a4:	2340      	movs	r3, #64	@ 0x40
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	@ 0x80
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fbb6 	bl	800791c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2240      	movs	r2, #64	@ 0x40
 80061ba:	621a      	str	r2, [r3, #32]

  return ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d006      	beq.n	8006208 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b04      	cmp	r3, #4
 8006230:	d106      	bne.n	8006240 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d110      	bne.n	8006284 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	32ae      	adds	r2, #174	@ 0xae
 80062a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e01c      	b.n	80062ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d115      	bne.n	80062e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	32ae      	adds	r2, #174	@ 0xae
 80062c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	32ae      	adds	r2, #174	@ 0xae
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	4611      	mov	r1, r2
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32ae      	adds	r2, #174	@ 0xae
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006310:	2303      	movs	r3, #3
 8006312:	e01c      	b.n	800634e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d115      	bne.n	800634c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32ae      	adds	r2, #174	@ 0xae
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	32ae      	adds	r2, #174	@ 0xae
 800633e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	4611      	mov	r1, r2
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6852      	ldr	r2, [r2, #4]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	4611      	mov	r1, r2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063a4:	2303      	movs	r3, #3
 80063a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	885b      	ldrh	r3, [r3, #2]
 8006402:	b29b      	uxth	r3, r3
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4293      	cmp	r3, r2
 800640a:	d91f      	bls.n	800644c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006412:	e013      	b.n	800643c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006414:	f107 030a 	add.w	r3, r7, #10
 8006418:	4619      	mov	r1, r3
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f000 f81b 	bl	8006456 <USBD_GetNextDesc>
 8006420:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b05      	cmp	r3, #5
 8006428:	d108      	bne.n	800643c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	789b      	ldrb	r3, [r3, #2]
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	429a      	cmp	r2, r3
 8006436:	d008      	beq.n	800644a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	885b      	ldrh	r3, [r3, #2]
 8006440:	b29a      	uxth	r2, r3
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	429a      	cmp	r2, r3
 8006446:	d8e5      	bhi.n	8006414 <USBD_GetEpDesc+0x2e>
 8006448:	e000      	b.n	800644c <USBD_GetEpDesc+0x66>
          break;
 800644a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800644c:	693b      	ldr	r3, [r7, #16]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	4413      	add	r3, r2
 800646e:	b29a      	uxth	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064ac:	8a3b      	ldrh	r3, [r7, #16]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	b21a      	sxth	r2, r3
 80064b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064bc:	89fb      	ldrh	r3, [r7, #14]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d005      	beq.n	80064f2 <USBD_StdDevReq+0x26>
 80064e6:	2b40      	cmp	r3, #64	@ 0x40
 80064e8:	d857      	bhi.n	800659a <USBD_StdDevReq+0xce>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00f      	beq.n	800650e <USBD_StdDevReq+0x42>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d153      	bne.n	800659a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	32ae      	adds	r2, #174	@ 0xae
 80064fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e04a      	b.n	80065a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	2b09      	cmp	r3, #9
 8006514:	d83b      	bhi.n	800658e <USBD_StdDevReq+0xc2>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <USBD_StdDevReq+0x50>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006571 	.word	0x08006571
 8006520:	08006585 	.word	0x08006585
 8006524:	0800658f 	.word	0x0800658f
 8006528:	0800657b 	.word	0x0800657b
 800652c:	0800658f 	.word	0x0800658f
 8006530:	0800654f 	.word	0x0800654f
 8006534:	08006545 	.word	0x08006545
 8006538:	0800658f 	.word	0x0800658f
 800653c:	08006567 	.word	0x08006567
 8006540:	08006559 	.word	0x08006559
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa3c 	bl	80069c4 <USBD_GetDescriptor>
          break;
 800654c:	e024      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fbcb 	bl	8006cec <USBD_SetAddress>
          break;
 8006556:	e01f      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fc0a 	bl	8006d74 <USBD_SetConfig>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
          break;
 8006564:	e018      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fcad 	bl	8006ec8 <USBD_GetConfig>
          break;
 800656e:	e013      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fcde 	bl	8006f34 <USBD_GetStatus>
          break;
 8006578:	e00e      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fd0d 	bl	8006f9c <USBD_SetFeature>
          break;
 8006582:	e009      	b.n	8006598 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd31 	bl	8006fee <USBD_ClrFeature>
          break;
 800658c:	e004      	b.n	8006598 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fd88 	bl	80070a6 <USBD_CtlError>
          break;
 8006596:	bf00      	nop
      }
      break;
 8006598:	e004      	b.n	80065a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fd82 	bl	80070a6 <USBD_CtlError>
      break;
 80065a2:	bf00      	nop
  }

  return ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop

080065b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065c6:	2b40      	cmp	r3, #64	@ 0x40
 80065c8:	d005      	beq.n	80065d6 <USBD_StdItfReq+0x26>
 80065ca:	2b40      	cmp	r3, #64	@ 0x40
 80065cc:	d852      	bhi.n	8006674 <USBD_StdItfReq+0xc4>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USBD_StdItfReq+0x26>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d14e      	bne.n	8006674 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d840      	bhi.n	8006666 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	889b      	ldrh	r3, [r3, #4]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d836      	bhi.n	800665c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	889b      	ldrh	r3, [r3, #4]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fedb 	bl	80063b2 <USBD_CoreFindIF>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2bff      	cmp	r3, #255	@ 0xff
 8006604:	d01d      	beq.n	8006642 <USBD_StdItfReq+0x92>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d11a      	bne.n	8006642 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800660c:	7bba      	ldrb	r2, [r7, #14]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	32ae      	adds	r2, #174	@ 0xae
 8006612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800661c:	7bba      	ldrb	r2, [r7, #14]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006624:	7bba      	ldrb	r2, [r7, #14]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32ae      	adds	r2, #174	@ 0xae
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800663a:	e004      	b.n	8006646 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006640:	e001      	b.n	8006646 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	88db      	ldrh	r3, [r3, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <USBD_StdItfReq+0xc0>
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fde0 	bl	800721a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800665a:	e009      	b.n	8006670 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fd21 	bl	80070a6 <USBD_CtlError>
          break;
 8006664:	e004      	b.n	8006670 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd1c 	bl	80070a6 <USBD_CtlError>
          break;
 800666e:	e000      	b.n	8006672 <USBD_StdItfReq+0xc2>
          break;
 8006670:	bf00      	nop
      }
      break;
 8006672:	e004      	b.n	800667e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fd15 	bl	80070a6 <USBD_CtlError>
      break;
 800667c:	bf00      	nop
  }

  return ret;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	889b      	ldrh	r3, [r3, #4]
 800669a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066a4:	2b40      	cmp	r3, #64	@ 0x40
 80066a6:	d007      	beq.n	80066b8 <USBD_StdEPReq+0x30>
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	f200 817f 	bhi.w	80069ac <USBD_StdEPReq+0x324>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02a      	beq.n	8006708 <USBD_StdEPReq+0x80>
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	f040 817a 	bne.w	80069ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fe85 	bl	80063cc <USBD_CoreFindEP>
 80066c2:	4603      	mov	r3, r0
 80066c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066c6:	7b7b      	ldrb	r3, [r7, #13]
 80066c8:	2bff      	cmp	r3, #255	@ 0xff
 80066ca:	f000 8174 	beq.w	80069b6 <USBD_StdEPReq+0x32e>
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 8170 	bne.w	80069b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80066d6:	7b7a      	ldrb	r2, [r7, #13]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066de:	7b7a      	ldrb	r2, [r7, #13]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	32ae      	adds	r2, #174	@ 0xae
 80066e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8163 	beq.w	80069b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066f0:	7b7a      	ldrb	r2, [r7, #13]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	@ 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006706:	e156      	b.n	80069b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d008      	beq.n	8006722 <USBD_StdEPReq+0x9a>
 8006710:	2b03      	cmp	r3, #3
 8006712:	f300 8145 	bgt.w	80069a0 <USBD_StdEPReq+0x318>
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 809b 	beq.w	8006852 <USBD_StdEPReq+0x1ca>
 800671c:	2b01      	cmp	r3, #1
 800671e:	d03c      	beq.n	800679a <USBD_StdEPReq+0x112>
 8006720:	e13e      	b.n	80069a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d002      	beq.n	8006734 <USBD_StdEPReq+0xac>
 800672e:	2b03      	cmp	r3, #3
 8006730:	d016      	beq.n	8006760 <USBD_StdEPReq+0xd8>
 8006732:	e02c      	b.n	800678e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <USBD_StdEPReq+0xce>
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	2b80      	cmp	r3, #128	@ 0x80
 800673e:	d00a      	beq.n	8006756 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f95d 	bl	8007a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800674a:	2180      	movs	r1, #128	@ 0x80
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f959 	bl	8007a04 <USBD_LL_StallEP>
 8006752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006754:	e020      	b.n	8006798 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fca4 	bl	80070a6 <USBD_CtlError>
              break;
 800675e:	e01b      	b.n	8006798 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10e      	bne.n	8006786 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <USBD_StdEPReq+0xfe>
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d008      	beq.n	8006786 <USBD_StdEPReq+0xfe>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	88db      	ldrh	r3, [r3, #6]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f93f 	bl	8007a04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fd47 	bl	800721a <USBD_CtlSendStatus>

              break;
 800678c:	e004      	b.n	8006798 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc88 	bl	80070a6 <USBD_CtlError>
              break;
 8006796:	bf00      	nop
          }
          break;
 8006798:	e107      	b.n	80069aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d002      	beq.n	80067ac <USBD_StdEPReq+0x124>
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d016      	beq.n	80067d8 <USBD_StdEPReq+0x150>
 80067aa:	e04b      	b.n	8006844 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <USBD_StdEPReq+0x146>
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d00a      	beq.n	80067ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 f921 	bl	8007a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c2:	2180      	movs	r1, #128	@ 0x80
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f91d 	bl	8007a04 <USBD_LL_StallEP>
 80067ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067cc:	e040      	b.n	8006850 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fc68 	bl	80070a6 <USBD_CtlError>
              break;
 80067d6:	e03b      	b.n	8006850 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	885b      	ldrh	r3, [r3, #2]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d136      	bne.n	800684e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 f93e 	bl	8007a70 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fd10 	bl	800721a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fde4 	bl	80063cc <USBD_CoreFindEP>
 8006804:	4603      	mov	r3, r0
 8006806:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006808:	7b7b      	ldrb	r3, [r7, #13]
 800680a:	2bff      	cmp	r3, #255	@ 0xff
 800680c:	d01f      	beq.n	800684e <USBD_StdEPReq+0x1c6>
 800680e:	7b7b      	ldrb	r3, [r7, #13]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11c      	bne.n	800684e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006814:	7b7a      	ldrb	r2, [r7, #13]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800681c:	7b7a      	ldrb	r2, [r7, #13]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32ae      	adds	r2, #174	@ 0xae
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d010      	beq.n	800684e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800682c:	7b7a      	ldrb	r2, [r7, #13]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	32ae      	adds	r2, #174	@ 0xae
 8006832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006842:	e004      	b.n	800684e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fc2d 	bl	80070a6 <USBD_CtlError>
              break;
 800684c:	e000      	b.n	8006850 <USBD_StdEPReq+0x1c8>
              break;
 800684e:	bf00      	nop
          }
          break;
 8006850:	e0ab      	b.n	80069aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d002      	beq.n	8006864 <USBD_StdEPReq+0x1dc>
 800685e:	2b03      	cmp	r3, #3
 8006860:	d032      	beq.n	80068c8 <USBD_StdEPReq+0x240>
 8006862:	e097      	b.n	8006994 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d007      	beq.n	800687a <USBD_StdEPReq+0x1f2>
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b80      	cmp	r3, #128	@ 0x80
 800686e:	d004      	beq.n	800687a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc17 	bl	80070a6 <USBD_CtlError>
                break;
 8006878:	e091      	b.n	800699e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800687a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800687e:	2b00      	cmp	r3, #0
 8006880:	da0b      	bge.n	800689a <USBD_StdEPReq+0x212>
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	3310      	adds	r3, #16
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	3304      	adds	r3, #4
 8006898:	e00b      	b.n	80068b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	4413      	add	r3, r2
 80068b0:	3304      	adds	r3, #4
 80068b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2202      	movs	r2, #2
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc6d 	bl	80071a0 <USBD_CtlSendData>
              break;
 80068c6:	e06a      	b.n	800699e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da11      	bge.n	80068f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	f003 020f 	and.w	r2, r3, #15
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3324      	adds	r3, #36	@ 0x24
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d117      	bne.n	800691a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fbda 	bl	80070a6 <USBD_CtlError>
                  break;
 80068f2:	e054      	b.n	800699e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fbc7 	bl	80070a6 <USBD_CtlError>
                  break;
 8006918:	e041      	b.n	800699e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800691a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da0b      	bge.n	800693a <USBD_StdEPReq+0x2b2>
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	3310      	adds	r3, #16
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	e00b      	b.n	8006952 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <USBD_StdEPReq+0x2d8>
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b80      	cmp	r3, #128	@ 0x80
 800695e:	d103      	bne.n	8006968 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e00e      	b.n	8006986 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f8b5 	bl	8007adc <USBD_LL_IsStallEP>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e002      	b.n	8006986 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2202      	movs	r2, #2
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc07 	bl	80071a0 <USBD_CtlSendData>
              break;
 8006992:	e004      	b.n	800699e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb85 	bl	80070a6 <USBD_CtlError>
              break;
 800699c:	bf00      	nop
          }
          break;
 800699e:	e004      	b.n	80069aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fb7f 	bl	80070a6 <USBD_CtlError>
          break;
 80069a8:	bf00      	nop
      }
      break;
 80069aa:	e005      	b.n	80069b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb79 	bl	80070a6 <USBD_CtlError>
      break;
 80069b4:	e000      	b.n	80069b8 <USBD_StdEPReq+0x330>
      break;
 80069b6:	bf00      	nop
  }

  return ret;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	2b0e      	cmp	r3, #14
 80069e6:	f200 8152 	bhi.w	8006c8e <USBD_GetDescriptor+0x2ca>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <USBD_GetDescriptor+0x2c>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a79 	.word	0x08006a79
 80069f8:	08006ab9 	.word	0x08006ab9
 80069fc:	08006c8f 	.word	0x08006c8f
 8006a00:	08006c8f 	.word	0x08006c8f
 8006a04:	08006c2f 	.word	0x08006c2f
 8006a08:	08006c5b 	.word	0x08006c5b
 8006a0c:	08006c8f 	.word	0x08006c8f
 8006a10:	08006c8f 	.word	0x08006c8f
 8006a14:	08006c8f 	.word	0x08006c8f
 8006a18:	08006c8f 	.word	0x08006c8f
 8006a1c:	08006c8f 	.word	0x08006c8f
 8006a20:	08006c8f 	.word	0x08006c8f
 8006a24:	08006c8f 	.word	0x08006c8f
 8006a28:	08006a2d 	.word	0x08006a2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a4e:	e126      	b.n	8006c9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb27 	bl	80070a6 <USBD_CtlError>
        err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a5e:	e11e      	b.n	8006c9e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	7c12      	ldrb	r2, [r2, #16]
 8006a6c:	f107 0108 	add.w	r1, r7, #8
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	60f8      	str	r0, [r7, #12]
      break;
 8006a76:	e112      	b.n	8006c9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c1b      	ldrb	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10d      	bne.n	8006a9c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	f107 0208 	add.w	r2, r7, #8
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
 8006a90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	2202      	movs	r2, #2
 8006a98:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a9a:	e100      	b.n	8006c9e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	f107 0208 	add.w	r2, r7, #8
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]
      break;
 8006ab6:	e0f2      	b.n	8006c9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	885b      	ldrh	r3, [r3, #2]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	f200 80ac 	bhi.w	8006c1c <USBD_GetDescriptor+0x258>
 8006ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <USBD_GetDescriptor+0x108>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006b19 	.word	0x08006b19
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b81 	.word	0x08006b81
 8006adc:	08006bb5 	.word	0x08006bb5
 8006ae0:	08006be9 	.word	0x08006be9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
 8006afc:	f107 0108 	add.w	r1, r7, #8
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b06:	e091      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 facb 	bl	80070a6 <USBD_CtlError>
            err++;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	3301      	adds	r3, #1
 8006b14:	72fb      	strb	r3, [r7, #11]
          break;
 8006b16:	e089      	b.n	8006c2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7c12      	ldrb	r2, [r2, #16]
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b3a:	e077      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fab1 	bl	80070a6 <USBD_CtlError>
            err++;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	3301      	adds	r3, #1
 8006b48:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4a:	e06f      	b.n	8006c2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	7c12      	ldrb	r2, [r2, #16]
 8006b64:	f107 0108 	add.w	r1, r7, #8
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4798      	blx	r3
 8006b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b6e:	e05d      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa97 	bl	80070a6 <USBD_CtlError>
            err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b7e:	e055      	b.n	8006c2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	7c12      	ldrb	r2, [r2, #16]
 8006b98:	f107 0108 	add.w	r1, r7, #8
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
 8006ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ba2:	e043      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa7d 	bl	80070a6 <USBD_CtlError>
            err++;
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bb2:	e03b      	b.n	8006c2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	7c12      	ldrb	r2, [r2, #16]
 8006bcc:	f107 0108 	add.w	r1, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd6:	e029      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa63 	bl	80070a6 <USBD_CtlError>
            err++;
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	3301      	adds	r3, #1
 8006be4:	72fb      	strb	r3, [r7, #11]
          break;
 8006be6:	e021      	b.n	8006c2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0a:	e00f      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa49 	bl	80070a6 <USBD_CtlError>
            err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1a:	e007      	b.n	8006c2c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa41 	bl	80070a6 <USBD_CtlError>
          err++;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	3301      	adds	r3, #1
 8006c28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c2a:	bf00      	nop
      }
      break;
 8006c2c:	e037      	b.n	8006c9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7c1b      	ldrb	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3e:	f107 0208 	add.w	r2, r7, #8
 8006c42:	4610      	mov	r0, r2
 8006c44:	4798      	blx	r3
 8006c46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c48:	e029      	b.n	8006c9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fa2a 	bl	80070a6 <USBD_CtlError>
        err++;
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	3301      	adds	r3, #1
 8006c56:	72fb      	strb	r3, [r7, #11]
      break;
 8006c58:	e021      	b.n	8006c9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7c1b      	ldrb	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10d      	bne.n	8006c7e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	f107 0208 	add.w	r2, r7, #8
 8006c6e:	4610      	mov	r0, r2
 8006c70:	4798      	blx	r3
 8006c72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	2207      	movs	r2, #7
 8006c7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7c:	e00f      	b.n	8006c9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fa10 	bl	80070a6 <USBD_CtlError>
        err++;
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8c:	e007      	b.n	8006c9e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa08 	bl	80070a6 <USBD_CtlError>
      err++;
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c9c:	bf00      	nop
  }

  if (err != 0U)
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11e      	bne.n	8006ce2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	88db      	ldrh	r3, [r3, #6]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d016      	beq.n	8006cda <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006cac:	893b      	ldrh	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	88da      	ldrh	r2, [r3, #6]
 8006cb6:	893b      	ldrh	r3, [r7, #8]
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	bf28      	it	cs
 8006cbc:	4613      	movcs	r3, r2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cc2:	893b      	ldrh	r3, [r7, #8]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fa69 	bl	80071a0 <USBD_CtlSendData>
 8006cce:	e009      	b.n	8006ce4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9e7 	bl	80070a6 <USBD_CtlError>
 8006cd8:	e004      	b.n	8006ce4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa9d 	bl	800721a <USBD_CtlSendStatus>
 8006ce0:	e000      	b.n	8006ce4 <USBD_GetDescriptor+0x320>
    return;
 8006ce2:	bf00      	nop
  }
}
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop

08006cec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	889b      	ldrh	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d131      	bne.n	8006d62 <USBD_SetAddress+0x76>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d12d      	bne.n	8006d62 <USBD_SetAddress+0x76>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d0c:	d829      	bhi.n	8006d62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d104      	bne.n	8006d30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f9bc 	bl	80070a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2e:	e01d      	b.n	8006d6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fef9 	bl	8007b34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa69 	bl	800721a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	e009      	b.n	8006d6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d60:	e004      	b.n	8006d6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f99e 	bl	80070a6 <USBD_CtlError>
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	885b      	ldrh	r3, [r3, #2]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006d8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d905      	bls.n	8006da0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f985 	bl	80070a6 <USBD_CtlError>
    return USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e08c      	b.n	8006eba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d002      	beq.n	8006db2 <USBD_SetConfig+0x3e>
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d029      	beq.n	8006e04 <USBD_SetConfig+0x90>
 8006db0:	e075      	b.n	8006e9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006db2:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d020      	beq.n	8006dfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006dba:	4b42      	ldr	r3, [pc, #264]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fe ffb9 	bl	8005d42 <USBD_SetClassConfig>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f962 	bl	80070a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dea:	e065      	b.n	8006eb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa14 	bl	800721a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006dfa:	e05d      	b.n	8006eb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa0c 	bl	800721a <USBD_CtlSendStatus>
      break;
 8006e02:	e059      	b.n	8006eb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e04:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d112      	bne.n	8006e32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006e14:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e1e:	4b29      	ldr	r3, [pc, #164]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fe ffa8 	bl	8005d7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f9f5 	bl	800721a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e30:	e042      	b.n	8006eb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e32:	4b24      	ldr	r3, [pc, #144]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d02a      	beq.n	8006e96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fe ff96 	bl	8005d7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e58:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fe ff6f 	bl	8005d42 <USBD_SetClassConfig>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00f      	beq.n	8006e8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f918 	bl	80070a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fe ff7b 	bl	8005d7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e8c:	e014      	b.n	8006eb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9c3 	bl	800721a <USBD_CtlSendStatus>
      break;
 8006e94:	e010      	b.n	8006eb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f9bf 	bl	800721a <USBD_CtlSendStatus>
      break;
 8006e9c:	e00c      	b.n	8006eb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f900 	bl	80070a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ea6:	4b07      	ldr	r3, [pc, #28]	@ (8006ec4 <USBD_SetConfig+0x150>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fe ff64 	bl	8005d7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb6:	bf00      	nop
  }

  return ret;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200001d4 	.word	0x200001d4

08006ec8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	88db      	ldrh	r3, [r3, #6]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d004      	beq.n	8006ee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f8e2 	bl	80070a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ee2:	e023      	b.n	8006f2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	dc02      	bgt.n	8006ef6 <USBD_GetConfig+0x2e>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc03      	bgt.n	8006efc <USBD_GetConfig+0x34>
 8006ef4:	e015      	b.n	8006f22 <USBD_GetConfig+0x5a>
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d00b      	beq.n	8006f12 <USBD_GetConfig+0x4a>
 8006efa:	e012      	b.n	8006f22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3308      	adds	r3, #8
 8006f06:	2201      	movs	r2, #1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f948 	bl	80071a0 <USBD_CtlSendData>
        break;
 8006f10:	e00c      	b.n	8006f2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	2201      	movs	r2, #1
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f940 	bl	80071a0 <USBD_CtlSendData>
        break;
 8006f20:	e004      	b.n	8006f2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f8be 	bl	80070a6 <USBD_CtlError>
        break;
 8006f2a:	bf00      	nop
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d81e      	bhi.n	8006f8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	88db      	ldrh	r3, [r3, #6]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d004      	beq.n	8006f5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f8a5 	bl	80070a6 <USBD_CtlError>
        break;
 8006f5c:	e01a      	b.n	8006f94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f043 0202 	orr.w	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	2202      	movs	r2, #2
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f90c 	bl	80071a0 <USBD_CtlSendData>
      break;
 8006f88:	e004      	b.n	8006f94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f88a 	bl	80070a6 <USBD_CtlError>
      break;
 8006f92:	bf00      	nop
  }
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	885b      	ldrh	r3, [r3, #2]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d107      	bne.n	8006fbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f92f 	bl	800721a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006fbc:	e013      	b.n	8006fe6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d10b      	bne.n	8006fde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	889b      	ldrh	r3, [r3, #4]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f91f 	bl	800721a <USBD_CtlSendStatus>
}
 8006fdc:	e003      	b.n	8006fe6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f860 	bl	80070a6 <USBD_CtlError>
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	2b02      	cmp	r3, #2
 8007004:	d80b      	bhi.n	800701e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10c      	bne.n	8007028 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f8ff 	bl	800721a <USBD_CtlSendStatus>
      }
      break;
 800701c:	e004      	b.n	8007028 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f840 	bl	80070a6 <USBD_CtlError>
      break;
 8007026:	e000      	b.n	800702a <USBD_ClrFeature+0x3c>
      break;
 8007028:	bf00      	nop
  }
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fa16 	bl	800648e <SWAPBYTE>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fa09 	bl	800648e <SWAPBYTE>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff f9fc 	bl	800648e <SWAPBYTE>
 8007096:	4603      	mov	r3, r0
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	80da      	strh	r2, [r3, #6]
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070b0:	2180      	movs	r1, #128	@ 0x80
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fca6 	bl	8007a04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fca2 	bl	8007a04 <USBD_LL_StallEP>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d042      	beq.n	8007164 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80070e2:	6938      	ldr	r0, [r7, #16]
 80070e4:	f000 f842 	bl	800716c <USBD_GetLen>
 80070e8:	4603      	mov	r3, r0
 80070ea:	3301      	adds	r3, #1
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f2:	d808      	bhi.n	8007106 <USBD_GetString+0x3e>
 80070f4:	6938      	ldr	r0, [r7, #16]
 80070f6:	f000 f839 	bl	800716c <USBD_GetLen>
 80070fa:	4603      	mov	r3, r0
 80070fc:	3301      	adds	r3, #1
 80070fe:	b29b      	uxth	r3, r3
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	e001      	b.n	800710a <USBD_GetString+0x42>
 8007106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	4413      	add	r3, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
  idx++;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	3301      	adds	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4413      	add	r3, r2
 8007126:	2203      	movs	r2, #3
 8007128:	701a      	strb	r2, [r3, #0]
  idx++;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	3301      	adds	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007130:	e013      	b.n	800715a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	4413      	add	r3, r2
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3301      	adds	r3, #1
 8007142:	613b      	str	r3, [r7, #16]
    idx++;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	3301      	adds	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	4413      	add	r3, r2
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
    idx++;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	3301      	adds	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e7      	bne.n	8007132 <USBD_GetString+0x6a>
 8007162:	e000      	b.n	8007166 <USBD_GetString+0x9e>
    return;
 8007164:	bf00      	nop
  }
}
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800717c:	e005      	b.n	800718a <USBD_GetLen+0x1e>
  {
    len++;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	3301      	adds	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3301      	adds	r3, #1
 8007188:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f5      	bne.n	800717e <USBD_GetLen+0x12>
  }

  return len;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	2100      	movs	r1, #0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fcea 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	2100      	movs	r1, #0
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fcd9 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	2100      	movs	r1, #0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fd00 	bl	8007c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2204      	movs	r2, #4
 8007226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fcb5 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2205      	movs	r2, #5
 800724c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007250:	2300      	movs	r3, #0
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fcda 	bl	8007c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800726c:	2200      	movs	r2, #0
 800726e:	490e      	ldr	r1, [pc, #56]	@ (80072a8 <MX_USB_DEVICE_Init+0x40>)
 8007270:	480e      	ldr	r0, [pc, #56]	@ (80072ac <MX_USB_DEVICE_Init+0x44>)
 8007272:	f7fe fce9 	bl	8005c48 <USBD_Init>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800727c:	f7f9 fa12 	bl	80006a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007280:	490b      	ldr	r1, [pc, #44]	@ (80072b0 <MX_USB_DEVICE_Init+0x48>)
 8007282:	480a      	ldr	r0, [pc, #40]	@ (80072ac <MX_USB_DEVICE_Init+0x44>)
 8007284:	f7fe fd10 	bl	8005ca8 <USBD_RegisterClass>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800728e:	f7f9 fa09 	bl	80006a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007292:	4806      	ldr	r0, [pc, #24]	@ (80072ac <MX_USB_DEVICE_Init+0x44>)
 8007294:	f7fe fd3e 	bl	8005d14 <USBD_Start>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800729e:	f7f9 fa01 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072a2:	bf00      	nop
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200000cc 	.word	0x200000cc
 80072ac:	200001d8 	.word	0x200001d8
 80072b0:	2000000c 	.word	0x2000000c

080072b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	6039      	str	r1, [r7, #0]
 80072be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2212      	movs	r2, #18
 80072c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072c6:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	200000ec 	.word	0x200000ec

080072d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	6039      	str	r1, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2204      	movs	r2, #4
 80072e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072ea:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	2000010c 	.word	0x2000010c

080072fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4907      	ldr	r1, [pc, #28]	@ (8007330 <USBD_FS_ProductStrDescriptor+0x34>)
 8007312:	4808      	ldr	r0, [pc, #32]	@ (8007334 <USBD_FS_ProductStrDescriptor+0x38>)
 8007314:	f7ff fed8 	bl	80070c8 <USBD_GetString>
 8007318:	e004      	b.n	8007324 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4904      	ldr	r1, [pc, #16]	@ (8007330 <USBD_FS_ProductStrDescriptor+0x34>)
 800731e:	4805      	ldr	r0, [pc, #20]	@ (8007334 <USBD_FS_ProductStrDescriptor+0x38>)
 8007320:	f7ff fed2 	bl	80070c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007324:	4b02      	ldr	r3, [pc, #8]	@ (8007330 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	200004b4 	.word	0x200004b4
 8007334:	08007dc8 	.word	0x08007dc8

08007338 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	4904      	ldr	r1, [pc, #16]	@ (8007358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007348:	4804      	ldr	r0, [pc, #16]	@ (800735c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800734a:	f7ff febd 	bl	80070c8 <USBD_GetString>
  return USBD_StrDesc;
 800734e:	4b02      	ldr	r3, [pc, #8]	@ (8007358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200004b4 	.word	0x200004b4
 800735c:	08007dd8 	.word	0x08007dd8

08007360 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	6039      	str	r1, [r7, #0]
 800736a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	221a      	movs	r2, #26
 8007370:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007372:	f000 f855 	bl	8007420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007376:	4b02      	ldr	r3, [pc, #8]	@ (8007380 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000110 	.word	0x20000110

08007384 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4907      	ldr	r1, [pc, #28]	@ (80073b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800739a:	4808      	ldr	r0, [pc, #32]	@ (80073bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800739c:	f7ff fe94 	bl	80070c8 <USBD_GetString>
 80073a0:	e004      	b.n	80073ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4904      	ldr	r1, [pc, #16]	@ (80073b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073a6:	4805      	ldr	r0, [pc, #20]	@ (80073bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073a8:	f7ff fe8e 	bl	80070c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073ac:	4b02      	ldr	r3, [pc, #8]	@ (80073b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200004b4 	.word	0x200004b4
 80073bc:	08007dec 	.word	0x08007dec

080073c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4907      	ldr	r1, [pc, #28]	@ (80073f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073d6:	4808      	ldr	r0, [pc, #32]	@ (80073f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073d8:	f7ff fe76 	bl	80070c8 <USBD_GetString>
 80073dc:	e004      	b.n	80073e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	4904      	ldr	r1, [pc, #16]	@ (80073f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073e2:	4805      	ldr	r0, [pc, #20]	@ (80073f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e4:	f7ff fe70 	bl	80070c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200004b4 	.word	0x200004b4
 80073f8:	08007df8 	.word	0x08007df8

080073fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	220c      	movs	r2, #12
 800740c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	@ (800741c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	20000100 	.word	0x20000100

08007420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007426:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <Get_SerialNum+0x44>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800742c:	4b0e      	ldr	r3, [pc, #56]	@ (8007468 <Get_SerialNum+0x48>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007432:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <Get_SerialNum+0x4c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d009      	beq.n	800745a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007446:	2208      	movs	r2, #8
 8007448:	4909      	ldr	r1, [pc, #36]	@ (8007470 <Get_SerialNum+0x50>)
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f814 	bl	8007478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007450:	2204      	movs	r2, #4
 8007452:	4908      	ldr	r1, [pc, #32]	@ (8007474 <Get_SerialNum+0x54>)
 8007454:	68b8      	ldr	r0, [r7, #8]
 8007456:	f000 f80f 	bl	8007478 <IntToUnicode>
  }
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	1fff7590 	.word	0x1fff7590
 8007468:	1fff7594 	.word	0x1fff7594
 800746c:	1fff7598 	.word	0x1fff7598
 8007470:	20000112 	.word	0x20000112
 8007474:	20000122 	.word	0x20000122

08007478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]
 800748e:	e027      	b.n	80074e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	0f1b      	lsrs	r3, r3, #28
 8007494:	2b09      	cmp	r3, #9
 8007496:	d80b      	bhi.n	80074b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0f1b      	lsrs	r3, r3, #28
 800749c:	b2da      	uxtb	r2, r3
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4619      	mov	r1, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	440b      	add	r3, r1
 80074a8:	3230      	adds	r2, #48	@ 0x30
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e00a      	b.n	80074c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	0f1b      	lsrs	r3, r3, #28
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	4619      	mov	r1, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	440b      	add	r3, r1
 80074c0:	3237      	adds	r2, #55	@ 0x37
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	3301      	adds	r3, #1
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	4413      	add	r3, r2
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	3301      	adds	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
 80074e0:	7dfa      	ldrb	r2, [r7, #23]
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d3d3      	bcc.n	8007490 <IntToUnicode+0x18>
  }
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b0ac      	sub	sp, #176	@ 0xb0
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	2288      	movs	r2, #136	@ 0x88
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fc1d 	bl	8007d58 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007526:	d173      	bne.n	8007610 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800752c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800752e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007532:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007536:	2301      	movs	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800753a:	2301      	movs	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800753e:	2318      	movs	r3, #24
 8007540:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007542:	2307      	movs	r3, #7
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007546:	2302      	movs	r3, #2
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800754a:	2302      	movs	r3, #2
 800754c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800754e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	4618      	mov	r0, r3
 800755a:	f7fb fd05 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007564:	f7f9 f89e 	bl	80006a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007568:	4b2b      	ldr	r3, [pc, #172]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 800756a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756c:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007574:	4b28      	ldr	r3, [pc, #160]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 8007576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007580:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007588:	2302      	movs	r3, #2
 800758a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758e:	2300      	movs	r3, #0
 8007590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007594:	2303      	movs	r3, #3
 8007596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800759a:	230a      	movs	r3, #10
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80075a4:	4619      	mov	r1, r3
 80075a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075aa:	f7f9 fb29 	bl	8000c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b2:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075ba:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c6:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d114      	bne.n	80075fc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	4a10      	ldr	r2, [pc, #64]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80075de:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80075ea:	f7fa fead 	bl	8002348 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f2:	4a09      	ldr	r2, [pc, #36]	@ (8007618 <HAL_PCD_MspInit+0x120>)
 80075f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075fa:	e001      	b.n	8007600 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80075fc:	f7fa fea4 	bl	8002348 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007600:	2200      	movs	r2, #0
 8007602:	2100      	movs	r1, #0
 8007604:	2043      	movs	r0, #67	@ 0x43
 8007606:	f7f9 fac4 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800760a:	2043      	movs	r0, #67	@ 0x43
 800760c:	f7f9 fadd 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007610:	bf00      	nop
 8007612:	37b0      	adds	r7, #176	@ 0xb0
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40021000 	.word	0x40021000

0800761c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fe fbbb 	bl	8005dae <USBD_LL_SetupStage>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	4613      	mov	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	4619      	mov	r1, r3
 800766a:	f7fe fbf5 	bl	8005e58 <USBD_LL_DataOutStage>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	460b      	mov	r3, r1
 8007680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	3320      	adds	r3, #32
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	4619      	mov	r1, r3
 800769e:	f7fe fc8e 	bl	8005fbe <USBD_LL_DataInStage>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fdc8 	bl	800624e <USBD_LL_SOF>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076ce:	2301      	movs	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	79db      	ldrb	r3, [r3, #7]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d001      	beq.n	80076de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076da:	f7f8 ffe3 	bl	80006a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076e4:	7bfa      	ldrb	r2, [r7, #15]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe fd6c 	bl	80061c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe fd14 	bl	8006122 <USBD_LL_Reset>
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fd5b 	bl	80061e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7adb      	ldrb	r3, [r3, #11]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <HAL_PCD_SuspendCallback+0x48>)
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4a03      	ldr	r2, [pc, #12]	@ (800774c <HAL_PCD_SuspendCallback+0x48>)
 800773e:	f043 0306 	orr.w	r3, r3, #6
 8007742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	e000ed00 	.word	0xe000ed00

08007750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7adb      	ldrb	r3, [r3, #11]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007778:	4b08      	ldr	r3, [pc, #32]	@ (800779c <HAL_PCD_ResumeCallback+0x4c>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	4a07      	ldr	r2, [pc, #28]	@ (800779c <HAL_PCD_ResumeCallback+0x4c>)
 800777e:	f023 0306 	bic.w	r3, r3, #6
 8007782:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007784:	f000 fae2 	bl	8007d4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fd45 	bl	800621e <USBD_LL_Resume>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	e000ed00 	.word	0xe000ed00

080077a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fd9b 	bl	80062f2 <USBD_LL_IsoOUTIncomplete>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fd57 	bl	800628e <USBD_LL_IsoINIncomplete>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fdad 	bl	8006356 <USBD_LL_DevConnected>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fdaa 	bl	800636c <USBD_LL_DevDisconnected>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d13c      	bne.n	80078aa <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007830:	4a20      	ldr	r2, [pc, #128]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a1e      	ldr	r2, [pc, #120]	@ (80078b4 <USBD_LL_Init+0x94>)
 800783c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007840:	4b1c      	ldr	r3, [pc, #112]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007848:	4b1a      	ldr	r3, [pc, #104]	@ (80078b4 <USBD_LL_Init+0x94>)
 800784a:	2206      	movs	r2, #6
 800784c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800784e:	4b19      	ldr	r3, [pc, #100]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007850:	2202      	movs	r2, #2
 8007852:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007854:	4b17      	ldr	r3, [pc, #92]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007856:	2202      	movs	r2, #2
 8007858:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800785a:	4b16      	ldr	r3, [pc, #88]	@ (80078b4 <USBD_LL_Init+0x94>)
 800785c:	2200      	movs	r2, #0
 800785e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007860:	4b14      	ldr	r3, [pc, #80]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007862:	2200      	movs	r2, #0
 8007864:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007866:	4b13      	ldr	r3, [pc, #76]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007868:	2200      	movs	r2, #0
 800786a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800786c:	4b11      	ldr	r3, [pc, #68]	@ (80078b4 <USBD_LL_Init+0x94>)
 800786e:	2200      	movs	r2, #0
 8007870:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007872:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007874:	2200      	movs	r2, #0
 8007876:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007878:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <USBD_LL_Init+0x94>)
 800787a:	2200      	movs	r2, #0
 800787c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800787e:	480d      	ldr	r0, [pc, #52]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007880:	f7f9 fb80 	bl	8000f84 <HAL_PCD_Init>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800788a:	f7f8 ff0b 	bl	80006a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800788e:	2180      	movs	r1, #128	@ 0x80
 8007890:	4808      	ldr	r0, [pc, #32]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007892:	f7fa fcc0 	bl	8002216 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007896:	2240      	movs	r2, #64	@ 0x40
 8007898:	2100      	movs	r1, #0
 800789a:	4806      	ldr	r0, [pc, #24]	@ (80078b4 <USBD_LL_Init+0x94>)
 800789c:	f7fa fc74 	bl	8002188 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078a0:	2280      	movs	r2, #128	@ 0x80
 80078a2:	2101      	movs	r1, #1
 80078a4:	4803      	ldr	r0, [pc, #12]	@ (80078b4 <USBD_LL_Init+0x94>)
 80078a6:	f7fa fc6f 	bl	8002188 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200006b4 	.word	0x200006b4

080078b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 fc67 	bl	80011a2 <HAL_PCD_Start>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d816      	bhi.n	800790c <USBD_LL_Start+0x54>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <USBD_LL_Start+0x2c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	080078fb 	.word	0x080078fb
 80078ec:	08007901 	.word	0x08007901
 80078f0:	08007907 	.word	0x08007907
    case HAL_OK :
      usb_status = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
    break;
 80078f8:	e00b      	b.n	8007912 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078fa:	2303      	movs	r3, #3
 80078fc:	73fb      	strb	r3, [r7, #15]
    break;
 80078fe:	e008      	b.n	8007912 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
    break;
 8007904:	e005      	b.n	8007912 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	73fb      	strb	r3, [r7, #15]
    break;
 800790a:	e002      	b.n	8007912 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	73fb      	strb	r3, [r7, #15]
    break;
 8007910:	bf00      	nop
  }
  return usb_status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	4603      	mov	r3, r0
 800792c:	70fb      	strb	r3, [r7, #3]
 800792e:	460b      	mov	r3, r1
 8007930:	70bb      	strb	r3, [r7, #2]
 8007932:	4613      	mov	r3, r2
 8007934:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007944:	78bb      	ldrb	r3, [r7, #2]
 8007946:	883a      	ldrh	r2, [r7, #0]
 8007948:	78f9      	ldrb	r1, [r7, #3]
 800794a:	f7fa f913 	bl	8001b74 <HAL_PCD_EP_Open>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d817      	bhi.n	8007988 <USBD_LL_OpenEP+0x6c>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USBD_LL_OpenEP+0x44>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007971 	.word	0x08007971
 8007964:	08007977 	.word	0x08007977
 8007968:	0800797d 	.word	0x0800797d
 800796c:	08007983 	.word	0x08007983
    case HAL_OK :
      usb_status = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	e00b      	b.n	800798e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
    break;
 800797a:	e008      	b.n	800798e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	e005      	b.n	800798e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e002      	b.n	800798e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	bf00      	nop
  }
  return usb_status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fa f946 	bl	8001c48 <HAL_PCD_EP_Close>
 80079bc:	4603      	mov	r3, r0
 80079be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d816      	bhi.n	80079f4 <USBD_LL_CloseEP+0x5c>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <USBD_LL_CloseEP+0x34>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079e3 	.word	0x080079e3
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079ef 	.word	0x080079ef
    case HAL_OK :
      usb_status = USBD_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	e00b      	b.n	80079fa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
    break;
 80079e6:	e008      	b.n	80079fa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e005      	b.n	80079fa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e002      	b.n	80079fa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80079f4:	2303      	movs	r3, #3
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	bf00      	nop
  }
  return usb_status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fa f9bd 	bl	8001da2 <HAL_PCD_EP_SetStall>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d816      	bhi.n	8007a60 <USBD_LL_StallEP+0x5c>
 8007a32:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <USBD_LL_StallEP+0x34>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a4f 	.word	0x08007a4f
 8007a40:	08007a55 	.word	0x08007a55
 8007a44:	08007a5b 	.word	0x08007a5b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4c:	e00b      	b.n	8007a66 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	73fb      	strb	r3, [r7, #15]
    break;
 8007a52:	e008      	b.n	8007a66 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
    break;
 8007a58:	e005      	b.n	8007a66 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5e:	e002      	b.n	8007a66 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	bf00      	nop
  }
  return usb_status;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fa f9e9 	bl	8001e66 <HAL_PCD_EP_ClrStall>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d816      	bhi.n	8007acc <USBD_LL_ClearStallEP+0x5c>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <USBD_LL_ClearStallEP+0x34>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007abb 	.word	0x08007abb
 8007aac:	08007ac1 	.word	0x08007ac1
 8007ab0:	08007ac7 	.word	0x08007ac7
    case HAL_OK :
      usb_status = USBD_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e00b      	b.n	8007ad2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e008      	b.n	8007ad2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	e005      	b.n	8007ad2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aca:	e002      	b.n	8007ad2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad0:	bf00      	nop
  }
  return usb_status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007aee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da0b      	bge.n	8007b10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007afe:	68f9      	ldr	r1, [r7, #12]
 8007b00:	4613      	mov	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3316      	adds	r3, #22
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	e00b      	b.n	8007b28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007b26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 ffea 	bl	8001b2c <HAL_PCD_SetAddress>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d816      	bhi.n	8007b90 <USBD_LL_SetUSBAddress+0x5c>
 8007b62:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <USBD_LL_SetUSBAddress+0x34>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b7f 	.word	0x08007b7f
 8007b70:	08007b85 	.word	0x08007b85
 8007b74:	08007b8b 	.word	0x08007b8b
    case HAL_OK :
      usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e00b      	b.n	8007b96 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	73fb      	strb	r3, [r7, #15]
    break;
 8007b82:	e008      	b.n	8007b96 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e005      	b.n	8007b96 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8e:	e002      	b.n	8007b96 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
    break;
 8007b94:	bf00      	nop
  }
  return usb_status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007bbe:	7af9      	ldrb	r1, [r7, #11]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	f7fa f8bc 	bl	8001d40 <HAL_PCD_EP_Transmit>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d816      	bhi.n	8007c00 <USBD_LL_Transmit+0x60>
 8007bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <USBD_LL_Transmit+0x38>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007be9 	.word	0x08007be9
 8007bdc:	08007bef 	.word	0x08007bef
 8007be0:	08007bf5 	.word	0x08007bf5
 8007be4:	08007bfb 	.word	0x08007bfb
    case HAL_OK :
      usb_status = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	75fb      	strb	r3, [r7, #23]
    break;
 8007bec:	e00b      	b.n	8007c06 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
    break;
 8007bf2:	e008      	b.n	8007c06 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
    break;
 8007bf8:	e005      	b.n	8007c06 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	75fb      	strb	r3, [r7, #23]
    break;
 8007bfe:	e002      	b.n	8007c06 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007c00:	2303      	movs	r3, #3
 8007c02:	75fb      	strb	r3, [r7, #23]
    break;
 8007c04:	bf00      	nop
  }
  return usb_status;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	607a      	str	r2, [r7, #4]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c2e:	7af9      	ldrb	r1, [r7, #11]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	f7fa f852 	bl	8001cdc <HAL_PCD_EP_Receive>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007c3c:	7dbb      	ldrb	r3, [r7, #22]
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d816      	bhi.n	8007c70 <USBD_LL_PrepareReceive+0x60>
 8007c42:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <USBD_LL_PrepareReceive+0x38>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c5f 	.word	0x08007c5f
 8007c50:	08007c65 	.word	0x08007c65
 8007c54:	08007c6b 	.word	0x08007c6b
    case HAL_OK :
      usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]
    break;
 8007c5c:	e00b      	b.n	8007c76 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	75fb      	strb	r3, [r7, #23]
    break;
 8007c62:	e008      	b.n	8007c76 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
    break;
 8007c68:	e005      	b.n	8007c76 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
    break;
 8007c6e:	e002      	b.n	8007c76 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	75fb      	strb	r3, [r7, #23]
    break;
 8007c74:	bf00      	nop
  }
  return usb_status;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_PCDEx_LPM_Callback+0x18>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d01f      	beq.n	8007cd6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007c96:	e03b      	b.n	8007d10 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7adb      	ldrb	r3, [r3, #11]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007ca0:	f000 f854 	bl	8007d4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8007caa:	f023 0306 	bic.w	r3, r3, #6
 8007cae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe faa5 	bl	800621e <USBD_LL_Resume>
    break;
 8007cd4:	e01c      	b.n	8007d10 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6812      	ldr	r2, [r2, #0]
 8007ce4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fa76 	bl	80061e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7adb      	ldrb	r3, [r3, #11]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d02:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <HAL_PCDEx_LPM_Callback+0x98>)
 8007d08:	f043 0306 	orr.w	r3, r3, #6
 8007d0c:	6113      	str	r3, [r2, #16]
    break;
 8007d0e:	bf00      	nop
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <USBD_static_malloc+0x18>)
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000b98 	.word	0x20000b98

08007d38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007d50:	f7f8 fbc0 	bl	80004d4 <SystemClock_Config>
}
 8007d54:	bf00      	nop
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <memset>:
 8007d58:	4402      	add	r2, r0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d100      	bne.n	8007d62 <memset+0xa>
 8007d60:	4770      	bx	lr
 8007d62:	f803 1b01 	strb.w	r1, [r3], #1
 8007d66:	e7f9      	b.n	8007d5c <memset+0x4>

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2600      	movs	r6, #0
 8007d74:	42a6      	cmp	r6, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4d0b      	ldr	r5, [pc, #44]	@ (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007dac <__libc_init_array+0x44>)
 8007d7c:	f000 f818 	bl	8007db0 <_init>
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2600      	movs	r6, #0
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d90:	4798      	blx	r3
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9a:	4798      	blx	r3
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	08007e58 	.word	0x08007e58
 8007da4:	08007e58 	.word	0x08007e58
 8007da8:	08007e58 	.word	0x08007e58
 8007dac:	08007e5c 	.word	0x08007e5c

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr
